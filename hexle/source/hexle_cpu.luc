module hexle_cpu (
    input clk,  // clock
    input slowclk,
    input rst,
    input green,
    input red,
    input key_sig[4],
    input high_contrast,
    input seg_sig[7],
    input rgb_sig[4],
    input keyclk[2],
    output cur_seg,
    output cur_rgb[3],
    output debug[13][16],
    output cur_state[8],
    output reg_debug[16][16]

  ) {
  
  control_unit control_system(.clk(clk), .rst(rst));
  alu alu_system;
  regfile_unit regfile_system(.clk(clk), .rst(rst));
  sig_processor proc; // handles all necessary signal processing for outputs

  sig bsel_out[16];
  sig wdsel_out[16];

  always {
    // initial setups to silence output compilation errors
    debug = 13x{{16h0}};
    
    proc.key_sig = 0;
    proc.seg_sig = 0;
    proc.rgb_sig = 0;
    proc.cd = 0;
    proc.sd = 0;
    proc.cb = 0;
    
    control_system.green = 0;
    control_system.red = 0;
    control_system.keypad = 0;
    control_system.ra_data = 0;
    control_system.slowclk = 0;
    control_system.key = 0;
    
    regfile_system.ra = 0;
    regfile_system.rb = 0;
    regfile_system.rc = 0;
    regfile_system.we = 0;
    regfile_system.sa = 0;
    regfile_system.ca = 0;
    regfile_system.slowclk = 0;
    
    alu_system.alufn_signal = control_system.alufn;

    // BSEL mux
    case(control_system.bsel){
      b000:
        bsel_out = regfile_system.reg_data_2;
      b001:
        bsel_out = control_system.rb;
      b010:
        bsel_out = h10;
      b011:
        bsel_out = h100;
      b100:
        bsel_out = h1000;
        
      default:
        bsel_out = regfile_system.reg_data_2;
    }

    // WDSEL mux
    case(control_system.wdsel){
      b0:
        wdsel_out = alu_system.out;
      b1: 
        wdsel_out = 16b0;
      default:
        wdsel_out = alu_system.out;
    } 
    
    // connect bsel, alu, and wdsel
    alu_system.a = regfile_system.reg_data_1;
    alu_system.b = bsel_out; 
    regfile_system.wdsel_out = wdsel_out;

    // output connections
    
    proc.key_sig = key_sig;
    proc.seg_sig = seg_sig;
    proc.rgb_sig = rgb_sig;
    proc.cb = high_contrast;
    proc.keyclk = keyclk;
   
    
    //***** CONTROL unit ******//
    control_system.slowclk = slowclk;
    control_system.green = green;
    control_system.red = red;
    control_system.keypad = proc.k; // keypad
    control_system.ra_data = regfile_system.reg_data_1;
    control_system.key = |key_sig; // keypad
    
    //***** REGFILE unit *****//
    regfile_system.ra = control_system.ra;
    regfile_system.rb = control_system.rb;
    regfile_system.rc = control_system.rc;
    regfile_system.we = control_system.we;
    regfile_system.sa = proc.sa;
    regfile_system.ca = proc.ca;
    regfile_system.slowclk = slowclk;
    
    proc.cd = regfile_system.cd;
    proc.sd = regfile_system.sd;
    cur_rgb = proc.cur_rgb;
    cur_seg = proc.cur_seg;
  
    reg_debug = regfile_system.reg_debug;

    // debug signals
    
    cur_state = control_system.cur_state;
    
    debug[0][15:0] = control_system.we;
    debug[1][15:0] = control_system.ra;
    debug[2][15:0] = control_system.rb;
    debug[3][15:0] = control_system.rc;
    debug[4][15:0] = control_system.bsel;
    debug[5][15:0] = control_system.wdsel;
    debug[6][15:0] = control_system.alufn;
    debug[7][15:0] = bsel_out;
    debug[8][15:0] = wdsel_out;
    debug[9][15:0] = control_system.cur_add;
    debug[10][15:0] = control_system.signals[15:0];
    debug[11][15:0] = control_system.signals[22:16];
    debug[12][15:0] = alu_system.out;


  }
}

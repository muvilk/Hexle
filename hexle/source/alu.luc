module alu (
    input a[16],
    input b[16],
    input alufn_signal[6],
    output out[16],
    output z,
    output v,
    output n
  ) {
  adder adder;
  shifter shifter;
  compare compare; 
  max max;
  min min;
  extract extract;
  count count;
  green green;
  yellow yellow;
  rng rng;
  count count;

  always {
    
    // input-module assignments
    
    adder.a = a;
    adder.b = b;
        
    compare.a = a;
    compare.b = b;
        
    shifter.a = a;
    shifter.b = b;
    
    max.a = a;
    
    min.a = a;
    
    extract.a = a;
    extract.b = b;
    
    count.a = a;
    count.b = b;
    
    green.a = a;
    green.b = b;
    
    yellow.a = a;
    yellow.b = b;
    
    rng.a = a;

    case(alufn_signal) {
      b000000: out = adder.out;
      b000001: out = adder.out; // module for SUB
      b000010: out = shifter.shift; // module for SHL
      b000011: out = c{15b0, compare.cmp}; // module for CMPEQ
      b000100: out = c{15b0, compare.cmp}; // module for CMPLE
      b000101: out = c{15b0, compare.cmp}; // module for B
      b000110: out = rng.out; // module for RNG
      b000111: out = green.out; // module for GRN
      b010111: out = yellow.out; // module for YLW
      b100111: out = c{12b0, extract.out}; // module for EXT
      b110111: out = count.count; // module for CNT
      b101111: out = c{12b0, max.out}; // module for MAX
      b111111: out = c{12b0, min.out}; // module for MIN
      default: out = 16b0;
    }
  }
}

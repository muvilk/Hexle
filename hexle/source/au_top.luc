module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield (ANODE)
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    
    input keypad[4],
    input black,
    input red,
    input high_contrast,
    
    output seg[7],
    output digit[4],
    output rgb[3]
    
  ) {
  
  sig rst;                  // reset signal
  seven_seg_processor proc;
  
  
  .clk(clk) { // input > button conditioner > edge detector > dff
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    edge_detector slowclock_edge(#RISE(1), #FALL(0));
    
    button_conditioner black_button_conditioner;
    edge_detector black_button_edge(#RISE(1), #FALL(0));
    dff black_button;
    
    button_conditioner red_button_conditioner;
    edge_detector red_button_edge(#RISE(1), #FALL(0));
    dff red_button;
    
    button_conditioner hc_button_conditioner;
    edge_detector hc_button_edge(#RISE(1), #FALL(0));
    dff hc_button;
    
    button_conditioner keypad_button_conditioner[4];
    edge_detector keypad_button_edge[4](#RISE(1), #FALL(0));
    dff keypad_button[4];
    
    .rst(rst) {
      hexle_cpu hexle_cpu;
      counter frequency_divider(#SIZE(16));
      multi_seven_seg seg (#DIGITS(4));
      
    }
  }
    
  always {
  
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
 
    usb_tx = usb_rx;         // connect tx output
 
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};
    io_seg = 8b0; // connect segments to the driver
    io_sel = 4b1111; // turn off all digits
      
    //
    
    proc.cur_state = hexle_cpu.cur_state;
    seg.values = proc.values;
    
    io_seg = ~seg.seg; // counter synced with slowclock is connected to 7-seg output to track state changes
    io_sel = ~seg.sel;

    segment = 7b0;
    digit = 4b0;
    rgb = 3b0;
    
    red_button_conditioner.in = red;
    red_button_edge.in = red_button_conditioner.out;
    red_button.d = red_button_edge.out;
    
    black_button_conditioner.in = black;
    black_button_edge.in = black_button_conditioner.out;
    black_button.d = black_button_edge.out;
    
    keypad_button_conditioner.in = keypad;
    keypad_button_edge.in = keypad_button_conditioner.out;
    keypad_button.d = keypad_button_edge.out;
    
    hc_button_conditioner.in = high_contrast;
    hc_button_edge.in = hc_button_conditioner.out;
    hc_button.d = hc_button_edge.out;

    
    segment = frequency_divider.value[13:7];
    digit = frequency_divider.value[6:3];
    rgb = hexle_cpu.cur_rgb;

    

    slowclock_edge.in = frequency_divider.value[2];
    
    hexle_cpu.red = red_button.q;
    hexle_cpu.black = black_button.q;
    hexle_cpu.keypad = keypad_button.q;
    hexle_cpu.high_contrast = hc_button.q;  
    hexle_cpu.slowclk = slowclock_edge.out;  
    
    hexle_cpu.seg_sig = frequency_divider.value[13:7];
    hexle_cpu.rgb_sig = frequency_divider.value[6:3];

    case (io_dip[0]) {
      h00:
        io_led[0] = hexle_cpu.reg_debug[0][7:0];
        io_led[1] = hexle_cpu.reg_debug[0][15:8];
      h01:
        io_led[0] = hexle_cpu.reg_debug[1][7:0];
        io_led[1] = hexle_cpu.reg_debug[1][15:8];
      
      h02:
        io_led[0] = hexle_cpu.reg_debug[2][7:0];
        io_led[1] = hexle_cpu.reg_debug[2][15:8];
      
      h03:
        io_led[0] = hexle_cpu.reg_debug[3][7:0];
        io_led[1] = hexle_cpu.reg_debug[3][15:8];
      
      h04:
        io_led[0] = hexle_cpu.reg_debug[4][7:0];
        io_led[1] = hexle_cpu.reg_debug[4][15:8];
      
      h05:
        io_led[0] = hexle_cpu.reg_debug[5][7:0];
        io_led[1] = hexle_cpu.reg_debug[5][15:8];
      
      h06:
        io_led[0] = hexle_cpu.reg_debug[6][7:0];
        io_led[1] = hexle_cpu.reg_debug[6][15:8];
      
      h07:
        io_led[0] = hexle_cpu.reg_debug[7][7:0];
        io_led[1] = hexle_cpu.reg_debug[7][15:8];
      
      h08:
        io_led[0] = hexle_cpu.reg_debug[8][7:0];
        io_led[1] = hexle_cpu.reg_debug[8][15:8];
      
      h09:
        io_led[0] = hexle_cpu.reg_debug[9][7:0];
        io_led[1] = hexle_cpu.reg_debug[9][15:8];
      
      h0A:
        io_led[0] = hexle_cpu.reg_debug[10][7:0];
        io_led[1] = hexle_cpu.reg_debug[10][15:8];
      
      h0B:
        io_led[0] = hexle_cpu.reg_debug[11][7:0];
        io_led[1] = hexle_cpu.reg_debug[11][15:8];
      
      h0C:
        io_led[0] = hexle_cpu.reg_debug[12][7:0];
        io_led[1] = hexle_cpu.reg_debug[12][15:8];
      
      h0D:
        io_led[0] = hexle_cpu.reg_debug[13][7:0];
        io_led[1] = hexle_cpu.reg_debug[13][15:8];
      
      h0E:
        io_led[0] = hexle_cpu.reg_debug[14][7:0];
        io_led[1] = hexle_cpu.reg_debug[14][15:8];
      
      h0F:
        io_led[0] = hexle_cpu.reg_debug[15][7:0];
        io_led[1] = hexle_cpu.reg_debug[15][15:8];
        
      h10:
        io_led[0] = hexle_cpu.debug[0][7:0];
        io_led[1] = hexle_cpu.debug[0][15:8];
      h11:
        io_led[0] = hexle_cpu.debug[1][7:0];
        io_led[1] = hexle_cpu.debug[1][15:8];
      
      h12:
        io_led[0] = hexle_cpu.debug[2][7:0];
        io_led[1] = hexle_cpu.debug[2][15:8];
        
      h13:
        io_led[0] = hexle_cpu.debug[3][7:0];
        io_led[1] = hexle_cpu.debug[3][15:8];
      
      h14:
        io_led[0] = hexle_cpu.debug[4][7:0];
        io_led[1] = hexle_cpu.debug[4][15:8];
        
      h15:
        io_led[0] = hexle_cpu.debug[5][7:0];
        io_led[1] = hexle_cpu.debug[5][15:8];
        
      h16:
        io_led[0] = hexle_cpu.debug[6][7:0];
        io_led[1] = hexle_cpu.debug[6][15:8];
        
      h17:
        io_led[0] = hexle_cpu.debug[7][7:0];
        io_led[1] = hexle_cpu.debug[7][15:8];
      
      h18:
        io_led[0] = hexle_cpu.debug[8][7:0];
        io_led[1] = hexle_cpu.debug[8][15:8];
      
      h19:
        io_led[0] = hexle_cpu.debug[9][7:0];
        io_led[1] = hexle_cpu.debug[9][15:8];
        
      h1A:
        io_led[0] = hexle_cpu.debug[10][7:0];
        io_led[1] = hexle_cpu.debug[10][15:8];
        
      h1B:
        io_led[0] = hexle_cpu.debug[11][7:0];
        io_led[1] = hexle_cpu.debug[11][15:8];
      
      h1C:
        io_led[0] = hexle_cpu.debug[12][7:0];
        io_led[1] = hexle_cpu.debug[12][15:8];
      
    }
  }
}
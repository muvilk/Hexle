module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield (ANODE)
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    
    input keypad[8],
    input green,
    input red,
    input high_contrast,
    
    output digit,
    output digitclock[7],
    output rgb,
    output rgbclock[6]
    
  ) {
  
  sig rst;                  // reset signal
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner button_conditioner[5];
    edge_detector edge_detector_manual[5](#RISE(1), #FALL(0));
    edge_detector edge_detector_auto(#RISE(1), #FALL(0));
    
    .rst(rst) {
      dff a[16];
      dff b[16];
      dff alufn[6];
      dff out[16];
      dff ans[16];
      fsm alu_runner = {A, B, OUT};
      hexle_cpu hexle_cpu;
      
    }
  }
  
  counter slowclock(#SIZE(1),#DIV(26), .clk(clk), .rst(rst));
  autotester autotester(.clk(slowclock.value), .rst(rst));
  
  always {
  
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
 
    usb_tx = usb_rx;         // connect tx output
 
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};
    io_seg = 8b0; // connect segments to the driver
    io_sel = 4b0000; // turn on rightmost digit, and leftmost digit
    
    edge_detector_auto.in = slowclock.value;
    dec_ctr.inc = edge_detector_auto.out;
    seg.values = dec_ctr.digits;
     
    io_seg = 8hff; // connect segments to the driver
    io_sel = 4hf; // connect digit select to the driver
    
    button_conditioner.in = io_button[4:0];
    edge_detector_manual.in = button_conditioner.out;
    
    //
    
    hexle_cpu.red = red;
    hexle_cpu.green = green;
    hexle_cpu.keypad = keypad;
    hexle_cpu.slowclk = slowclk;
    hexle_cpu.high_contrast = high_contrast
    
    
  

     
  }
}
module control_unit (
    input clk,
    input rst,    
    //input slowclk,
    input green,
    input red,
    input key,
    input keypad[4],
    input ra_data[16],
    input ans[16],
    output we,
    output ra[4],
    output rb[16],
    output rc[4],
    output bsel[3],
    output wdsel,
    output alufn[6],
    output next
  ) {
  
  const CU_ROM = { // format: c{ we (1 bit) + ra (4 bits) + rb (4 bits) + rc (4 bits) + bsel (3 bits) + wdsel (1 bit) + alufn (6 bits)} IN THIS ORDER; total: 23 bits in length
    b10000000011010100000101,  //A1D0
    b10000000000010001000000,  //RESET_A1
    b10000000000110001000000,  //RESET_A1_RGB
    b10000000000100001000000,  //RESET_A2_DIGIT
    b10000000001000001000000,  //RESET_A2_RGB
    b10000000010000001000000,  //RESET_HINT
    b10000000001110001000000,  //RESET_HINT_RGB
    b10000000001100001000000,  //RESET_COUNTER
    b10000000001010001000000,  //RESET_COUNTER_RGB
    b00000000000000000000000,  //INITIALISATION
    b11001000000000100000110,  //ANSWER_GENERATION
    b10000000011100000101111,  //MAX_DIGIT
    b10000000011110000111111,  //MIN_DIGIT
    b11110111110000000000001,  //HINT_CALCULATION
    b10111000101110010000000,  //HINT_RGB
    b10000000011110000000101,  //A1D1_A
    b11111110011110010000010,  //A1D1_B
    b10001111100010000000000,  //A1D1_C
    b10011000000111000000000,  //A1D1_D
    b11111100011110010000010,  //A1D2_B
    b10011000000110110000000,  //A1D2_D
    b11111010011110010000010,  //A1D3_B
    b10011000000110100000000,  //A1D3_D
    b11111000011110010000010,  //A1D4_B
    b10011000100110010000000,  //A1D4_D
    b10001111100010000000001,  //A1D1_E
    b10011000000111000000001,  //A1D1_F
    b10011000000110110000001,  //A1D2F
    b10011000000110100000001,  //A1D3_F
    b10011000100110010000001,  //A1D4_F
    b10001000011110000101111,  //A1_MAX
    b10001000011100000111111,  //A1_MIN
    b11111111011100000000001,  //A1_HINT
    b11110100011100000000011,  //A1_CMPEQ
    b11110000000000000000000,  //A1_CHECK
    b10000000110010000000101,  //SEED
    b10110000101100010000000,  //COUNTER
    b10101000101010010000000,  //COUNTER_RGB
    b10000000111110000000111,  //A1_CHECK_GREEN
    b11111001011110010000010,  //A1_SHIFT_GREEN
    b11111001100110000000000,  //A1_MERGE_GREEN
    b10000000111110000010111,  //A1_CHECK_YELLOW
    b11111000111110010000010,  //A1_SHIFT_YELLOW
    b10011111100110000000000,  //A1_MERGE_YELLOW
    b10010111100100000000000,  //A2D1_C
    b10100000001001000000000,  //A2D1_D
    b10100000001000110000000,  //A2D2_D
    b10100000001000100000000,  //A2D3_D
    b10100000101000010000000,  //A2D4_D
    b10010111100100000000001,  //A2D1_E
    b10100000001001000000001,  //A2D1_F
    b10100000001000110000001,  //A2D2F
    b10100000001000100000001,  //A2D3_F
    b10100000101000010000001,  //A2D4_F
    b10010000011110000101111,  //A2_MAX
    b10010000011100000111111,  //A1_MIN
    b00011000000000000000000,  //BRANCH_D1
    b10001001111100010100111,  //EXTRACT_A1D1
    b10010001111110010100111,  //EXTRACT_A2D1
    b11110111111100000000011,  //D1G_CMPEQ
    b10001111011110000110111,  //COUNT_A1D1_IN_A1
    b10010111011100000110111,  //COUNT_A1D1_IN_A2
    b11111111011100000000100,  //D1Y_CMPLE
    b01110000000000000000000,  //D1_RETURN_BRANCH
    b10001001011100010100111,  //EXTRACT_A1D2
    b10010001011110010100111,  //EXTRACT_A2D2
    b10001000111100010100111,  //EXTRACT_A1D3
    b10010000111110010100111,  //EXTRACT_A2D3
    b10001000011100010100111,  //EXTRACT_A1D4
    b10010000011110010100111,  //EXTRACT_A2D4
    b10000001011110000000111,  //A2_CHECK_GREEN
    b11111010001000000000000,  //A2_MERGE_GREEN
    b10000001011110000010111,  //A2_CHECK_YELLOW
    b10100111101000000000000,  //A2_MERGE_YELLOW
    b10000001000010001000101,  //MIGRATE_A2_DIGIT
    b10000010000110001000101  //MIGRATE_A2_RGB
    };
  
  .clk(clk) {
    .rst(rst) {
      fsm state = {
        INITIALISATION, ANSWER_GENERATION, MAX_DIGIT, MIN_DIGIT, HINT_CALCULATION, HINT_RGB, 
        A1D0, 
        A1D1_A, A1D1_B, A1D1_C, A1D1_D, A1D1, A1D1_E, A1D1_F, 
        A1D2_A, A1D2_B, A1D2_C, A1D2_D, A1D2, A1D2_E, A1D2_F,
        A1D3_A, A1D3_B, A1D3_C, A1D3_D, A1D3, A1D3_E, A1D3_F, 
        A1D4_A, A1D4_B, A1D4_C, A1D4_D, A1D4, A1D4_E, A1D4_F, 
        A1_MAX, A1_MIN, A1_HINT, A1_CMPEQ, 
        A1_CHECK, SEED, COUNTER, COUNTER_RGB, 
        A1_CHECK_GREEN, A1_SHIFT_GREEN, A1_MERGE_GREEN, 
        A1_CHECK_YELLOW, A1_SHIFT_YELLOW, A1_MERGE_YELLOW, 
        A2D0, 
        A2D1_A, A2D1_B, A2D1_C, A2D1_D, A2D1, A2D1_E, A2D1_F, 
        A2D2_A, A2D2_B, A2D2_C, A2D2_D, A2D2, A2D2_E, A2D2_F,
        A2D3_A, A2D3_B, A2D3_C, A2D3_D, A2D3, A2D3_E, A2D3_F, 
        A2D4_A, A2D4_B, A2D4_C, A2D4_D, A2D4, A2D4_E, A2D4_F, 
        A2_MAX, A2_MIN, A2_HINT, A2_CMPEQ, 
        A2_CHECK, COUNTER, COUNTER_RGB, 
        BRANCH_D1, EXTRACT_A1D1, BRANCH_D1_GY, EXTRACT_A2D1, D1G_CMPEQ, COUNT_A1D1_IN_A1, COUNT_A1D1_IN_A2, D1Y_CMPLE, D1_RETURN_BRANCH, 
        BRANCH_D2, EXTRACT_A1D2, BRANCH_D2_GY, EXTRACT_A2D2, D2G_CMPEQ, COUNT_A1D2_IN_A1, COUNT_A1D2_IN_A2, D2Y_CMPLE, D2_RETURN_BRANCH, 
        BRANCH_D3, EXTRACT_A1D3, BRANCH_D3_GY, EXTRACT_A2D3, D3G_CMPEQ, COUNT_A1D3_IN_A1, COUNT_A1D3_IN_A2, D3Y_CMPLE, D3_RETURN_BRANCH, 
        BRANCH_D4, EXTRACT_A1D4, BRANCH_D4_GY, EXTRACT_A2D4, D4G_CMPEQ, COUNT_A1D4_IN_A1, COUNT_A1D4_IN_A2, D4Y_CMPLE, D4_RETURN_BRANCH, 
        A2_CHECK_GREEN, A2_SHIFT_GREEN, A2_MERGE_GREEN, 
        A2_CHECK_YELLOW, A2_SHIFT_YELLOW, A2_MERGE_YELLOW, 
        MIGRATE_A2_DIGIT, MIGRATE_A2_RGB, RESET_A2_DIGIT, RESET_A2_RGB, 
        END, 
        RESET_A1, RESET_A2, RESET_A1_RGB, RESET_A2_RGB, RESET_HINT, RESET_HINT_RGB, RESET_COUNTER, RESET_COUNTER_RGB}; // we need to add everything here
      dff address[7]; // adjust bits when we finalise our number of unique control signal combinations ALSO not sure if we need to use dffs or can just initialise a varialbe
    }
  }
 
  always {
    
    we = CU_ROM[address.q][22];
    ra = CU_ROM[address.q][21:18];
    rb = c{12b0, CU_ROM[address.q][17:14]};
    rc = CU_ROM[address.q][13:10];
    bsel = CU_ROM[address.q][9:7];
    wdsel = CU_ROM[address.q][6];
    alufn = CU_ROM[address.q][5:0];
    next = 0;

    if (slowclk) {
    
      case (state.q){
        
        state.INITIALISATION:
          address.d = b1000010;
          state.d = state.ANSWER_GENERATION;
          
        state.ANSWER_GENERATION:
          address.d = b1000001; // need to update to store B, reading B as literal
          next = 1;
          rb = ans;
          state.d = state.MAX_DIGIT;
          
        state.MAX_DIGIT:
          address.d = b1000000;
          state.d = state.MIN_DIGIT;

        state.MIN_DIGIT:
          address.d = b0111111;
          state.d = state.HINT_CALCULATION;

        state.HINT_CALCULATION:
          address.d = b0111110;
          state.d = state.HINT_RGB;

        state.HINT_RGB:
          address.d = b0111101;
          state.d = state.A1D0;


  //ATTEMPT 1

      //ATTEMPT 1 DIGIT 1
        state.A1D0:
        
          if (key == 1) {
            rb = c{12b0, keypad};
            address.d = b1001011; // need to update to store B to temp reg of choice, reading B as literal
            state.d = state.A1D1_A;
          }

        state.A1D1_A:
          address.d = b0111100; // need to update to access register using rb, instead of reading as literal
          state.d = state.A1D1_B;

        state.A1D1_B:
          address.d = b0111011;
          state.d = state.A1D1_C;

        state.A1D1_C:
          address.d = b0111010;
          state.d = state.A1D1_D;

        state.A1D1_D:
          address.d = b0111001;
          state.d = state.A1D1;

        state.A1D1:
          address.d = b1001011;
          case(red) {
            b1: state.d = state.A1D1_E;
          }
          if(key == 1) {
            rb = c{12b0, keypad};        
            state.d = state.A1D2_A;
          }

        state.A1D1_E:
          address.d = b0110010;
          state.d = state.A1D1_F;
      
        state.A1D1_F:
          address.d = b0110001;
          state.d = state.A1D0;

  //ATTEMPT 1 DIGIT 2   
        state.A1D2_A:
          address.d = b0111100;
          state.d = state.A1D2_B;

        state.A1D2_B:
          address.d = b0111000;
          state.d = state.A1D2_C;

        state.A1D2_C:
          address.d = b0111010;
          state.d = state.A1D2_D;

        state.A1D2_D:
          address.d = b0110111;
          state.d = state.A1D2;

        state.A1D2:
          address.d = b1001011;
          case(red) {
            b1: state.d = state.A1D2_E;
          }
          if(key == 1) {
            rb = c{12b0, keypad};
            state.d = state.A1D3_A;
          }
                    
        state.A1D2_E:
          address.d = b0110010;
          state.d = state.A1D2_F;
      
        state.A1D2_F:
          address.d = b0110000;
          state.d = state.A1D1;
            
  //ATTEMPT 1 DIGIT 3
        state.A1D3_A:
          address.d = b0111100;
          state.d = state.A1D3_B;

        state.A1D3_B:
          address.d = b0110110;
          state.d = state.A1D3_C;

        state.A1D3_C:
          address.d = b0111010;
          state.d = state.A1D3_D;

        state.A1D3_D:
          address.d = b0110101;
          state.d = state.A1D3;

        state.A1D3:
          address.d = b1001011;
          case(red) {
            b1: state.d = state.A1D3_E;
          }
          if(key == 1) {
            rb = c{12b0, keypad};
            state.d = state.A1D4_A;
          }
        
        state.A1D3_E:
          address.d = b0110010;
          state.d = state.A1D3_F;
      
        state.A1D3_F:
          address.d = b0101111;
          state.d = state.A1D2;

  //ATTEMPT 1 DIGIT 4
        state.A1D4_A:
          address.d = b0111100;
          state.d = state.A1D4_B;

        state.A1D4_B:
          address.d = b0110100;
          state.d = state.A1D4_C;

        state.A1D4_C:
          address.d = b0111010;
          state.d = state.A1D4_D;

        state.A1D4_D:
          address.d = b0110011;
          state.d = state.A1D4;

        state.A1D4:
          address.d = b1000010;
          case(red) {
            b1: state.d = state.A1D4_E;
          }
          case(green){
            b1: state.d = state.A1_MAX;
          }
        
        state.A1D4_E:
          address.d = b0110010;
          state.d = state.A1D4_F;
      
        state.A1D4_F:
          address.d = b0101110;
          state.d = state.A1D3;

  //ATTEMPT 1 CHECK
        state.A1_MAX:
          address.d = b0101101;
          state.d = state.A1_MIN;
        
        state.A1_MIN:
          address.d = b0101100;
          state.d = state.A1_HINT;
        
        state.A1_HINT:
          address.d = b0101011;
          state.d = state.A1_CMPEQ;

        state.A1_CMPEQ:
          address.d = b0101010;
          state.d = state.A1_CHECK;

        state.A1_CHECK:
          case(ra_data) {
              h0001:
                state.d = state.SEED;
              default:
                state.d = state.A1D4;
          }  
          
        state.SEED:
          address.d = b0101000;
          state.d = state.COUNTER;

        state.COUNTER:
          address.d = b0100111;
          state.d = state.COUNTER_RGB;
        
        state.COUNTER_RGB:
          address.d = b0100110;
          state.d = state.A1_CHECK_GREEN;

  //ATTEMPT 1 CHECK RGB      
        state.A1_CHECK_GREEN:
          address.d = b0100101;
          state.d = state.A1_SHIFT_GREEN;
        
        state.A1_SHIFT_GREEN:
          address.d = b0100100;
          state.d = state.A1_MERGE_GREEN;      
        
        state.A1_MERGE_GREEN:
          address.d = b0100011;
          case(ra_data) {
            h4444:
              state.d = state.END;
            default:
              state.d = state.A1_CHECK_YELLOW;
          }

        state.A1_CHECK_YELLOW:
          address.d = b0100010;
          state.d = state.A1_SHIFT_YELLOW;
        
        state.A1_SHIFT_YELLOW:
          address.d = b0100001;
          state.d = state.A1_MERGE_YELLOW;

        state.A1_MERGE_YELLOW:
          address.d = b0100000;
          state.d = state.A2D0;


  //ATTEMPT 2

  //ATTEMPT 2 DIGIT 1
        state.A2D0:

            if (key == 1) {
              rb = c{12b0, keypad};
              address.d = b1001011;
              state.d = state.A2D1_A;
            }

        state.A2D1_A:
          address.d = b0111100;
          state.d = state.A2D1_B;

        state.A2D1_B:
          address.d = b0111011;
          state.d = state.A2D1_C;

        state.A2D1_C:
          address.d = b0011111;
          state.d = state.A2D1_D;

        state.A2D1_D:
          address.d = b0011110;
          state.d = state.A2D1;

        state.A2D1:
          address.d = b1001011;
          case(red) {
            b1: state.d = state.A2D1_E;
          }
          if(key == 1) {
            rb = c{12b0, keypad}
            b1: state.d = state.A2D2_A;
          }

        state.A2D1_E:
          address.d = b0011010;
          state.d = state.A2D1_F;
      
        state.A2D1_F:
          address.d = b0011001;
          state.d = state.A2D0;

  //ATTEMPT 2 DIGIT 2
        state.A2D2_A:
          address.d = b0111100;
          state.d = state.A2D2_B;

        state.A2D2_B:
          address.d = b0111000;
          state.d = state.A2D2_C;

        state.A2D2_C:
          address.d = b0011111;
          state.d = state.A2D2_D;

        state.A2D2_D:
          address.d = b0011101;
          state.d = state.A2D2;

        state.A2D2:
          address.d = b1001011;
          case(red) {
            b1: state.d = state.A2D2_E;
          }
          if(key == 1) {
            rb = c{12b0, keypad}
            b1: state.d = state.A2D3_A;
          }

        state.A2D2_E:
          address.d = b0011010;
          state.d = state.A2D2_F;
      
        state.A2D2_F:
          address.d = b0011000;
          state.d = state.A2D1;

  //ATTEMPT 2 DIGIT 3
        state.A2D3_A:
          address.d = b0111100;
          state.d = state.A2D3_B;

        state.A2D3_B:
          address.d = b0110110;
          state.d = state.A2D3_C;

        state.A2D3_C:
          address.d = b0011111;
          state.d = state.A2D3_D;

        state.A2D3_D:
          address.d = b0011100;
          state.d = state.A2D3;

        state.A2D3:
          address.d = b1001011;
          case(red) {
            b1: state.d = state.A2D2_E;
          }
          if(key == 1) {
            rb = c{12b0, keypad}
            b1: state.d = state.A2D4_A;
          }

        state.A2D3_E:
          address.d = b0011010;
          state.d = state.A2D3_F;
      
        state.A2D3_F:
          address.d = b0010111;
          state.d = state.A2D2;

  //ATTEMPT 2 DIGIT 4
        state.A2D4_A:
          address.d = b0111100;
          state.d = state.A2D4_B;

        state.A2D4_B:
          address.d = b0110100;
          state.d = state.A2D4_C;

        state.A2D4_C:
          address.d = b0011111;
          state.d = state.A2D4_D;

        state.A2D4_D:
          address.d = b0011011;
          state.d = state.A2D4;

        state.A2D4:
          address.d = b1000010;
          case(red) {
            b1: state.d = state.A2D4_E;
          }
          case(green){
            b1: state.d = state.A2_MAX;
          }

        state.A2D4_E:
          address.d = b0011010;
          state.d = state.A2D4_F;
      
        state.A2D3_F:
          address.d = b0010110;
          state.d = state.A2D3;

  //ATTEMPT 2 CHECK
        state.A2_MAX:
          address.d = b0010101;
          state.d = state.A2_MIN;
        
        state.A2_MIN:
          address.d = b0010100;
          state.d = state.A2_HINT;
        
        state.A2_HINT:
          address.d = b0101011;
          state.d = state.A2_CMPEQ;

        state.A2_CMPEQ:
          address.d = b0101010;
          state.d = state.A2_CHECK;

        state.A2_CHECK:
          case(ra_data) {
              h0001:
                state.d = state.COUNTER;
              default:
                state.d = state.A2D4;
          }

        state.COUNTER:
          address.d = b0100111;
          state.d = state.COUNTER_RGB;


        state.COUNTER_RGB:
          address.d = b0100110;
          state.d = state.A1_CHECK_GREEN;

  //BRANCH D1
        state.BRANCH_D1:
          address.d = b0010011;
          case(ra_data[15:12]) {
            h0001:
              state.d = state.BRANCH_D2;
            default:
              state.d = state.EXTRACT_A1D1;
          }
        
        state.EXTRACT_A1D1:
          address.d = b0010010;
          state.d = state.BRANCH_D1_GY;

        state.BRANCH_D1_GY:
          address.d = b0010011;
          case(ra_data[15:12]) {
            h0004:
              state.d = state.EXTRACT_A2D1;
          default:
              state.d = state.COUNT_A1D1_IN_A1;
          }

        //SUBBRANCH 1
        state.EXTRACT_A2D1:	
          address.d = b0010001;	
          state.d = state.D1G_CMPEQ;
        
        state.D1G_CMPEQ:	
          address.d = b0010000;	
          state.d = state.D1_RETURN_BRANCH;
        
        //SUBBRANCH 2
        state.COUNT_A1D1_IN_A1:	
          address.d = b0001111;	
          state.d = state.COUNT_A1D1_IN_A2;
        
        state.COUNT_A1D1_IN_A2:	
          address.d = b0001110;	
          state.d = state.D1Y_CMPLE;
        
        state.D1Y_CMPLE:	
          address.d = b0001101;	
          state.d = state.D1_RETURN_BRANCH;

        state.D1_RETURN_BRANCH:
          address.d = b0001100;
          case(ra_data) {
            h0000:
              state.d = state.A2D4;
          default:
              state.d = state.BRANCH_D2;
          }

  //BRANCH D2
        state.BRANCH_D2:
          address.d = b0010011;
          case(ra_data[11:8]) {
            h0001:
              state.d = state.BRANCH_D3;
            default:
              state.d = state.EXTRACT_A1D2;
          }

        state.EXTRACT_A1D2:	
          address.d = b0001011;	
          state.d = state.BRANCH_D2_GY;

        state.BRANCH_D2_GY:
          address.d = b0010011;
          case(ra_data[11:8]) {
            h0004:
              state.d = state.EXTRACT_A2D2;
          default:
              state.d = state.COUNT_A1D2_IN_A1;
          }

        //SUBBRANCH 1
        state.EXTRACT_A2D2:	
          address.d = b0001010;	
          state.d = state.D2G_CMPEQ;
        
        state.D2G_CMPEQ:	
          address.d = b0010000;
          state.d = state.D2_RETURN_BRANCH;
        
        //SUBBRANCH 2      
        state.COUNT_A1D2_IN_A1:	
          address.d = b0001111;	
          state.d = state.COUNT_A1D2_IN_A2;
        
        state.COUNT_A1D2_IN_A2:	
          address.d = b0001110;	
          state.d = state.D2Y_CMPLE;
          
        state.D2Y_CMPLE:	
          address.d = b0001101;	
          state.d = state.D2_RETURN_BRANCH;

        state.D2_RETURN_BRANCH:
          address.d = b0001100;
          case(ra_data) {
            h0000:
              state.d = state.A2D4;
          default:
              state.d = state.BRANCH_D3;
          }

  //BRANCH D3
        state.BRANCH_D3:
          address.d = b0010011;
          case(ra_data[7:4]) {
            h0001:
              state.d = state.BRANCH_D4;
            default:
              state.d = state.EXTRACT_A1D3;
          }

        state.EXTRACT_A1D3:	
          address.d = b0001001;	
          state.d = state.BRANCH_D3_GY;

        state.BRANCH_D3_GY:
          address.d = b0010011;
          case(ra_data[7:4]) {
            h0004:
              state.d = state.EXTRACT_A2D3;
          default:
              state.d = state.COUNT_A1D3_IN_A1;
          }

        //SUBBRANCH 1
        state.EXTRACT_A2D3:	
          address.d = b0001000;	
          state.d = state.D3G_CMPEQ;
        
        state.D3G_CMPEQ:	
          address.d = b0010000;
          state.d = state.D3_RETURN_BRANCH;
        
        //SUBBRANCH 2      
        state.COUNT_A1D3_IN_A1:	
          address.d = b0001111;	
          state.d = state.COUNT_A1D3_IN_A2;
        
        state.COUNT_A1D3_IN_A2:	
          address.d = b0001110;	
          state.d = state.D3Y_CMPLE;
          
        state.D3Y_CMPLE:	
          address.d = b0001101;	
          state.d = state.D3_RETURN_BRANCH;

        state.D3_RETURN_BRANCH:
          address.d = b0001100;
          case(ra_data) {
            h0000:
              state.d = state.A2D4;
          default:
              state.d = state.BRANCH_D4;
          }

  //BRANCH D4
        state.BRANCH_D4:
          address.d = b0010011;
          case(ra_data[3:0]) {
            h0001:
              state.d = state.A2_CHECK_GREEN;
            default:
              state.d = state.EXTRACT_A1D4;
          }

        state.EXTRACT_A1D4:	
          address.d = b0000111;	
          state.d = state.BRANCH_D4_GY;

        state.BRANCH_D4_GY:
          address.d = b0010011;
          case(ra_data[3:0]) {
            h0004:
              state.d = state.EXTRACT_A2D4;
          default:
              state.d = state.COUNT_A1D3_IN_A1;
          }

        //SUBBRANCH 1
        state.EXTRACT_A2D4:	
          address.d = b0000110;	
          state.d = state.D4G_CMPEQ;
        
        state.D4G_CMPEQ:	
          address.d = b0010000;
          state.d = state.D4_RETURN_BRANCH;
        
        //SUBBRANCH 2      
        state.COUNT_A1D4_IN_A1:	
          address.d = b0001111;	
          state.d = state.COUNT_A1D4_IN_A2;
        
        state.COUNT_A1D4_IN_A2:	
          address.d = b0001110;	
          state.d = state.D4Y_CMPLE;
          
        state.D4Y_CMPLE:	
          address.d = b0001101;	
          state.d = state.D4_RETURN_BRANCH;

        state.D4_RETURN_BRANCH:
          address.d = b0001100;
          case(ra_data) {
            h0000:
              state.d = state.A2D4;
          default:
              state.d = state.A2_CHECK_GREEN;
          }

  //ATTEMPT 2 CHECK RGB  
        state.A2_CHECK_GREEN:	
          address.d = b0000101;	
          state.d = state.A2_SHIFT_GREEN;
        
        state.A2_SHIFT_GREEN:	
          address.d = b0100100;	
          state.d = state.A2_MERGE_GREEN;
        
        state.A2_MERGE_GREEN:	
          address.d = b0000100;
          case(ra_data) {
            h4444:
              state.d = state.END;
          default:
              state.d = state.A2_CHECK_YELLOW;
          }	

        state.A2_CHECK_YELLOW:	
          address.d = b0000011;	
          state.d = state.A2_SHIFT_YELLOW;
        
        state.A2_SHIFT_YELLOW:	
          address.d = b0100001;	
          state.d = state.A2_MERGE_YELLOW;
        
        state.A2_MERGE_YELLOW:	
          address.d = b0000010;	
          state.d = state.MIGRATE_A2_DIGIT;

  //SHIFT ATTEMPT 2 TO ATTEMPT 1      
        state.MIGRATE_A2_DIGIT:	
          address.d = b0000001;	
          state.d = state.MIGRATE_A2_RGB;
        
        state.MIGRATE_A2_RGB:	
          address.d = b0000000;	
          state.d = state.RESET_A2_DIGIT;
        
        state.RESET_A2_DIGIT:	
          address.d = b1001000;	
          state.d = state.RESET_A2_RGB;
        
        state.RESET_A2_RGB:	
          address.d = b1000111;	
          state.d = state.A2D0;

  //END RESET
        state.END:
          address.d = b1000010;
          case(green || red) { // if enter/delete is pressed
            b1:
              state.d = state.RESET_A1;
          }

        state.RESET_A1:
          address.d = b1001010;
          state.d = state.RESET_A2;
        
        state.RESET_A2:
          address.d = b1001000;
          state.d = state.RESET_A1_RGB;
        
        state.RESET_A1_RGB:
          address.d = b1001001;
          state.d = state.RESET_A2_RGB;

        state.RESET_A2_RGB:
          address.d = b1000111;
          state.d = state.RESET_HINT;

        state.RESET_HINT:
          address.d = b1000110;
          state.d = state.RESET_HINT_RGB;

        state.RESET_HINT_RGB:
          address.d = b1000101;
          state.d = state.RESET_COUNTER;
        
        state.RESET_COUNTER:
          address.d = b1000100;
          state.d = state.RESET_COUNTER_RGB;
        
        state.RESET_COUNTER_RGB:
          address.d = b1000011;
          state.d = state.ANSWER_GENERATION;

//      state.EXAMPLE:
//        address.d = 6b0; // address of CURRENT state, will be the same regardless of button pressed
//        case(green || red) { // if enter/delete is pressed
//          b1:
//            state.d = state.INITIALISATION; //go to initialization NO NEED to define b0 case, that would lead to automatic switching which we don't want
//            state.d = state.EXAMPLE; // in the event that it is meant to loop, actually code wise we don't need to put the case for a loop in i think cause naturally if not defined nothing will happen
//         }
        
//      state.EXAMPLE2:
//        address.d = 6b0;
//        ra = keypad; // i believe this will overwrite the default value, so for instructions taking in keypad for an input can just put 0000 as a placeholder or sth
        
//      state.EXAMPLE3: // branching example - reads ra directly from REGFILE
//        case(ra_data) { // for branching states, no control signals 
//          h4444:
//            state.d = state.EXAMPLE;
//          default:
//            state.d = state.EXAMPLE2;               
//        }
      }
    }
  }
}

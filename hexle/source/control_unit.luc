module control_unit (
    input clk,
    input rst,    
    input slowclk,
    input black,
    input red,
    input keypad[4],
    input ra_data[16],
    output we,
    output ra[4],
    output rb[16],
    output rc[4],
    output bsel[3],
    output wdsel,
    output alufn[6],
    output cur_state[8],
    output cur_add[7],
    output signals[23]
    ) 

{
  







  const CU_ROM = { // format: c{ we (1 bit) + ra (4 bits) + rb (4 bits) + rc (4 bits) + bsel (3 bits) + wdsel (1 bit) + alufn (6 bits)} IN THIS ORDER; total: 23 bits in length
    b10001101100010000000000, //A1D2_C
    b10001101100010000000001, //A1D2_E
    b10001110000010000000000, //A1D3_C
    b10001110000010000000001, //A1D3_E
    b10001110100010000000000, //A1D4_C
    b10001110100010000000001, //A1D4_E
    b10010101100100000000000, //A2D2_C
    b10010101100100000000001, //A2D2_E
    b10010110000100000000000, //A2D3_C
    b10010110000100000000001, //A2D3_E
    b10010110100100000000000, //A2D4_C
    b10010110100100000000001, //A2D4_E
    b10000000000010001000000, //RESET_A1
    b10000000000110001000000, //RESET_A1_RGB
    b10000000000100001000000, //RESET_A2_DIGIT
    b10000000001000001000000, //RESET_A2_RGB
    b10000000010000001000000, //RESET_HINT
    b10000000001110001000000, //RESET_HINT_RGB
    b10000000001100001000000, //RESET_COUNTER
    b10000000001010001000000, //RESET_COUNTER_RGB
    b00000000000000000000000, //INITIALISATION
    b11001000000000010011100, //ANSWER_GENERATION
    b10000000011100000101111, //MAX_DIGIT
    b10000000011110000111111, //MIN_DIGIT
    b11110111110000000000001, //HINT_CALCULATION
    b10111000101110010000000, //HINT_RGB
    b10000000011110000011100, //A1D1_A
    b11111110010100010100000, //A1D1_B
    b10001101000010000000000, //A1D1_C
    b10011000000111000000000, //A1D1_D
    b11111100010110010100000, //A1D2_B
    b10011000000110110000000, //A1D2_D
    b11111010011000010100000, //A1D3_B
    b10011000000110100000000, //A1D3_D
    b11111000011010010100000, //A1D4_B
    b10011000100110010000000, //A1D4_D
    b10001101000010000000001, //A1D1_E
    b10011000000111000000001, //A1D1_F
    b10011000000110110000001, //A1D2_F
    b10011000000110100000001, //A1D3_F
    b10011000100110010000001, //A1D4_F
    b10001000011110000101111, //A1_MAX
    b10001000011100000111111, //A1_MIN
    b11111111011100000000001, //A1_HINT
    b11110100011100000110011, //A1_CMPEQ
    b11110000000000000000000, //A1_CHECK
    b10000000110010000011100, //SEED
    b10110000101100010000000, //COUNTER_A1
    b10101000101010010000000, //COUNTER_RGB_A1
    b10000000111110000000111, //A1_CHECK_GREEN
    b11111001011110010100000, //A1_SHIFT_GREEN
    b11111001100110000000000, //A1_MERGE_GREEN
    b10000000111110000010111, //A1_CHECK_YELLOW
    b11111000111110010100000, //A1_SHIFT_YELLOW
    b10011111100110000000000, //A1_MERGE_YELLOW
    b10010101000100000000000, //A2D1_C
    b10100000001001000000000, //A2D1_D
    b10100000001000110000000, //A2D2_D
    b10100000001000100000000, //A2D3_D
    b10100000101000010000000, //A2D4_D
    b10010101000100000000001, //A2D1_E
    b10100000001001000000001, //A2D1_F
    b10100000001000110000001, //A2D2_F
    b10100000001000100000001, //A2D3_F
    b10100000101000010000001, //A2D4_F
    b10010000011110000101111, //A2_MAX
    b10010000011100000111111, //A2_MIN
    b00011000000000000000000, //BRANCH_D1
    b10001001111100010100111, //EXTRACT_A1D1
    b10010001111110010100111, //EXTRACT_A2D1
    b11110111111100000110011, //D1G_CMPEQ
    b10001111011110000110111, //COUNT_A1D1_IN_A1
    b10010111011100000110111, //COUNT_A1D1_IN_A2
    b11111111011100000110111, //D1Y_CMPLE
    b01110000000000000000000, //D1_RETURN_BRANCH
    b10001001011100010100111, //EXTRACT_A1D2
    b10010001011110010100111, //EXTRACT_A2D2
    b10001000111100010100111, //EXTRACT_A1D3
    b10010000111110010100111, //EXTRACT_A2D3
    b10001000011100010100111, //EXTRACT_A1D4
    b10010000011110010100111, //EXTRACT_A2D4
    b10000001011110000000111, //A2_CHECK_GREEN
    b11111010001000000000000, //A2_MERGE_GREEN
    b10000001011110000010111, //A2_CHECK_YELLOW
    b10100111101000000000000, //A2_MERGE_YELLOW
    b10000001000010001011100, //MIGRATE_A2_DIGIT
    b10000010000110001011100, //MIGRATE_A2_RGB

    };
  
  .clk(clk) {
    .rst(rst) {
      pn_gen rng;
      fsm state = {
        INITIALISATION, ANSWER_GENERATION, MAX_DIGIT, MIN_DIGIT, HINT_CALCULATION, HINT_RGB, 
        A1D0, 
        A1D1_A, A1D1_B, A1D1_C, A1D1_D, A1D1, A1D1_E, A1D1_F, 
        A1D2_A, A1D2_B, A1D2_C, A1D2_D, A1D2, A1D2_E, A1D2_F,
        A1D3_A, A1D3_B, A1D3_C, A1D3_D, A1D3, A1D3_E, A1D3_F, 
        A1D4_A, A1D4_B, A1D4_C, A1D4_D, A1D4, A1D4_E, A1D4_F, 
        A1_MAX, A1_MIN, A1_HINT, A1_CMPEQ, 
        A1_CHECK, SEED, COUNTER_A1, COUNTER_RGB_A1, 
        A1_CHECK_GREEN, A1_SHIFT_GREEN, A1_MERGE_GREEN, 
        A1_CHECK_YELLOW, A1_SHIFT_YELLOW, A1_MERGE_YELLOW,

        A2D0, 
        A2D1_A, A2D1_B, A2D1_C, A2D1_D, A2D1, A2D1_E, A2D1_F, 
        A2D2_A, A2D2_B, A2D2_C, A2D2_D, A2D2, A2D2_E, A2D2_F,
        A2D3_A, A2D3_B, A2D3_C, A2D3_D, A2D3, A2D3_E, A2D3_F, 
        A2D4_A, A2D4_B, A2D4_C, A2D4_D, A2D4, A2D4_E, A2D4_F, 
        A2_MAX, A2_MIN, A2_HINT, A2_CMPEQ, 
        A2_CHECK, COUNTER_A2, COUNTER_RGB_A2, 
        BRANCH_D1, EXTRACT_A1D1, BRANCH_D1_GY, EXTRACT_A2D1, D1G_CMPEQ, COUNT_A1D1_IN_A1, COUNT_A1D1_IN_A2, D1Y_CMPLE, D1_RETURN_BRANCH, 
        BRANCH_D2, EXTRACT_A1D2, BRANCH_D2_GY, EXTRACT_A2D2, D2G_CMPEQ, COUNT_A1D2_IN_A1, COUNT_A1D2_IN_A2, D2Y_CMPLE, D2_RETURN_BRANCH, 
        BRANCH_D3, EXTRACT_A1D3, BRANCH_D3_GY, EXTRACT_A2D3, D3G_CMPEQ, COUNT_A1D3_IN_A1, COUNT_A1D3_IN_A2, D3Y_CMPLE, D3_RETURN_BRANCH, 
        BRANCH_D4, EXTRACT_A1D4, BRANCH_D4_GY, EXTRACT_A2D4, D4G_CMPEQ, COUNT_A1D4_IN_A1, COUNT_A1D4_IN_A2, D4Y_CMPLE, D4_RETURN_BRANCH, 
        A2_CHECK_GREEN, A2_SHIFT_GREEN, A2_MERGE_GREEN, 
        A2_CHECK_YELLOW, A2_SHIFT_YELLOW, A2_MERGE_YELLOW, 
        
        MIGRATE_A2_DIGIT, MIGRATE_A2_RGB, RESET_A2_DIGIT, RESET_A2_RGB, 
        END, 
        RESET_A1, RESET_A2, RESET_A1_RGB, RESET_A2_RGB_2, RESET_HINT, RESET_HINT_RGB, RESET_COUNTER, RESET_COUNTER_RGB}; // we need to add everything here
      fsm statetemp = {INITIALISATION, ANSWER_GENERATION, MAX_DIGIT, MIN_DIGIT, HINT_CALCULATION, HINT_RGB, A1D0, A1D1_A, A1D1_B, A1D1_C, A1D1_D, A1D1, A1D1_E, A1D1_F, A1D2_A, A1D2_B, A1D2_C, A1D2_D, A1D2, A1D2_E, A1D2_F, A1D3_A, A1D3_B, A1D3_C, A1D3_D, A1D3, A1D3_E, A1D3_F, A1D4_A, A1D4_B, A1D4_C, A1D4_D, A1D4, A1D4_E, A1D4_F, A1_MAX, A1_MIN, A1_HINT, A1_CMPEQ, A1_CHECK, SEED, COUNTER_A1, COUNTER_RGB_A1, A1_CHECK_GREEN, A1_SHIFT_GREEN, A1_MERGE_GREEN, A1_CHECK_YELLOW, A1_SHIFT_YELLOW, A1_MERGE_YELLOW, A2D0, A2D1_A, A2D1_B, A2D1_C, A2D1_D, A2D1, A2D1_E, A2D1_F, A2D2_A, A2D2_B, A2D2_C, A2D2_D, A2D2, A2D2_E, A2D2_F, A2D3_A, A2D3_B, A2D3_C, A2D3_D, A2D3, A2D3_E, A2D3_F, A2D4_A, A2D4_B, A2D4_C, A2D4_D, A2D4, A2D4_E, A2D4_F, A2_MAX, A2_MIN, A2_HINT, A2_CMPEQ, A2_CHECK, COUNTER_A2, COUNTER_RGB_A2, BRANCH_D1, EXTRACT_A1D1, BRANCH_D1_GY, EXTRACT_A2D1, D1G_CMPEQ, COUNT_A1D1_IN_A1, COUNT_A1D1_IN_A2, D1Y_CMPLE, D1_RETURN_BRANCH, BRANCH_D2, EXTRACT_A1D2, BRANCH_D2_GY, EXTRACT_A2D2, D2G_CMPEQ, COUNT_A1D2_IN_A1, COUNT_A1D2_IN_A2, D2Y_CMPLE, D2_RETURN_BRANCH, BRANCH_D3, EXTRACT_A1D3, BRANCH_D3_GY, EXTRACT_A2D3, D3G_CMPEQ, COUNT_A1D3_IN_A1, COUNT_A1D3_IN_A2, D3Y_CMPLE, D3_RETURN_BRANCH, BRANCH_D4, EXTRACT_A1D4, BRANCH_D4_GY, EXTRACT_A2D4, D4G_CMPEQ, COUNT_A1D4_IN_A1, COUNT_A1D4_IN_A2, D4Y_CMPLE, D4_RETURN_BRANCH, A2_CHECK_GREEN, A2_SHIFT_GREEN, A2_MERGE_GREEN, A2_CHECK_YELLOW, A2_SHIFT_YELLOW, A2_MERGE_YELLOW, MIGRATE_A2_DIGIT, MIGRATE_A2_RGB, RESET_A2_DIGIT, RESET_A2_RGB, END, RESET_A1, RESET_A2, RESET_A1_RGB, RESET_A2_RGB_2, RESET_HINT, RESET_HINT_RGB, RESET_COUNTER, RESET_COUNTER_RGB};
      dff address[7]; // adjust bits when we finalise our number of unique control signal combinations ALSO not sure if we need to use dffs or can just initialise a varialbe
    }
  }
 
  always {
    
    address.d = b1000010;
    we = CU_ROM[address.q][22];
    ra = CU_ROM[address.q][21:18];
    rb = c{12b0, CU_ROM[address.q][17:14]};
    rc = CU_ROM[address.q][13:10];
    bsel = CU_ROM[address.q][9:7];
    wdsel = CU_ROM[address.q][6];
    alufn = CU_ROM[address.q][5:0];
    cur_state = 255;
    rng.seed = 32x{b1};
    rng.next = 0;
    cur_add = address.q;
    signals = CU_ROM[address.q];

    if (slowclk) {
      state.d = statetemp.q;
    }
    
    case (state.q) {
      
      state.INITIALISATION:
        address.d = b1000010;
        cur_state = 0;
        if (black || red) { // if enter/delete is pressed
          rng.next = 1;
          statetemp.d = state.ANSWER_GENERATION;
        }
        
      state.ANSWER_GENERATION:
        address.d = b1000001; // need to update to store B, reading B as literal
        cur_state = 1;
        rb = rng.num[15:0];
        statetemp.d = state.MAX_DIGIT;
        
      state.MAX_DIGIT:
        address.d = b1000000;
        cur_state = 2;
        statetemp.d = state.MIN_DIGIT;

      state.MIN_DIGIT:
        address.d = b0111111;
        cur_state = 3;
        statetemp.d = state.HINT_CALCULATION;

      state.HINT_CALCULATION:
        address.d = b0111110;
        cur_state = 4;
        statetemp.d = state.HINT_RGB;

      state.HINT_RGB:
        address.d = b0111101;
        cur_state = 5;
        statetemp.d = state.A1D0;


//ATTEMPT 1

    //ATTEMPT 1 DIGIT 1
      state.A1D0:
        cur_state = 6;
        rb = c{12b0, keypad};
        address.d = b1010010; // need to update to store B to temp reg of choice, reading B as literal
        if (black) {
          statetemp.d = state.A1D1_A;
        }

      state.A1D1_A:
        address.d = b1010001; // need to update to access register using rb, instead of reading as literal
        cur_state = 7;
        statetemp.d = state.A1D1_B;

      state.A1D1_B:
        address.d = b0111011;
        cur_state = 8;
        statetemp.d = state.A1D1_C;

      state.A1D1_C:
        address.d = b0111010;
        cur_state = 9;
        statetemp.d = state.A1D1_D;

      state.A1D1_D:
        address.d = b0111001;
        cur_state = 10;
        statetemp.d = state.A1D1;

      state.A1D1:
        address.d = b1010000;
        rb = c{12b0, keypad};   
        cur_state = 11;
        if (red) {
          statetemp.d = state.A1D1_E;
        }
        if (black) {
          statetemp.d = state.A1D2_A;
        }

      state.A1D1_E:
        address.d = b0110010;
        cur_state = 12;
        statetemp.d = state.A1D1_F;
    
      state.A1D1_F:
        address.d = b0110001;
        cur_state = 13;
        statetemp.d = state.A1D1_A;

//ATTEMPT 1 DIGIT 2   
      state.A1D2_A:
        address.d = b1001111;
        cur_state = 14;
        statetemp.d = state.A1D2_B;

      state.A1D2_B:
        address.d = b0111000;
        cur_state = 15;
        statetemp.d = state.A1D2_C;

      state.A1D2_C:
        address.d = b1010110;
        cur_state = 16;
        statetemp.d = state.A1D2_D;

      state.A1D2_D:
        address.d = b0110111;
        cur_state = 17;
        statetemp.d = state.A1D2;

      state.A1D2:
        address.d = b1001110;
        cur_state = 18;
        rb = c{12b0, keypad};
        if (red) {
          statetemp.d = state.A1D2_E;
        }
        if (black) {
          statetemp.d = state.A1D3_A;
        }
                  
      state.A1D2_E:
        address.d = b1010101;
        cur_state = 19;
        statetemp.d = state.A1D2_F;
    
      state.A1D2_F:
        address.d = b0110000;
        cur_state = 20;
        statetemp.d = state.A1D2_A;
          
//ATTEMPT 1 DIGIT 3
      state.A1D3_A:
        address.d = b1001101;
        cur_state = 21;
        statetemp.d = state.A1D3_B;

      state.A1D3_B:
        address.d = b0110110;
        cur_state = 22;
        statetemp.d = state.A1D3_C;

      state.A1D3_C:
        address.d = b1010100;
        cur_state = 23;
        statetemp.d = state.A1D3_D;

      state.A1D3_D:
        address.d = b0110101;
        cur_state = 24;
        statetemp.d = state.A1D3;

      state.A1D3:
        address.d = b1001100;
        cur_state = 25;
        rb = c{12b0, keypad};
        if (red) {
          statetemp.d = state.A1D3_E;
        }
        if (black) {
          statetemp.d = state.A1D4_A;
        }
      
      state.A1D3_E:
        address.d = b1010011;
        cur_state = 26;
        statetemp.d = state.A1D3_F;
    
      state.A1D3_F:
        address.d = b0101111;
        cur_state = 27;
        statetemp.d = state.A1D3_A;

//ATTEMPT 1 DIGIT 4
      state.A1D4_A:
        address.d = b1001011;
        cur_state = 28;
        statetemp.d = state.A1D4_B;

      state.A1D4_B:
        address.d = b0110100;
        cur_state = 29;
        statetemp.d = state.A1D4_C;

      state.A1D4_C:
        address.d = b1010010;
        cur_state = 30;
        statetemp.d = state.A1D4_D;

      state.A1D4_D:
        address.d = b0110011;
        cur_state = 31;
        statetemp.d = state.A1D4;

      state.A1D4:
        address.d = b1000010;
        cur_state = 32;
        if (red) {
          statetemp.d = state.A1D4_E;
        }
        if (black){
          statetemp.d = state.A1_MAX;
        }
      
      state.A1D4_E:
        address.d = b1010001;
        cur_state = 33;
        statetemp.d = state.A1D4_F;
    
      state.A1D4_F:
        address.d = b0101110;
        cur_state = 34;
        statetemp.d = state.A1D4_A;

//ATTEMPT 1 CHECK
      state.A1_MAX:
        address.d = b0101101;
        cur_state = 35;
        statetemp.d = state.A1_MIN;
      
      state.A1_MIN:
        address.d = b0101100;
        cur_state = 36;
        statetemp.d = state.A1_HINT;
      
      state.A1_HINT:
        address.d = b0101011;
        cur_state = 37;
        statetemp.d = state.A1_CMPEQ;

      state.A1_CMPEQ:
        address.d = b0101010;
        cur_state = 38;
        statetemp.d = state.A1_CHECK;

      state.A1_CHECK:
        address.d = b0101001;
        cur_state = 39;
        case (ra_data) {
            h0001:
              statetemp.d = state.SEED;
            default:
              statetemp.d = state.A1D4;
        }  
        
      state.SEED:
        address.d = b0101000;
        cur_state = 40;
        statetemp.d = state.COUNTER_A1;

      state.COUNTER_A1:
        address.d = b0100111;
        cur_state = 41;
        statetemp.d = state.COUNTER_RGB_A1;
      
      state.COUNTER_RGB_A1:
        address.d = b0100110;
        cur_state = 42;
        statetemp.d = state.A1_CHECK_GREEN;

//ATTEMPT 1 CHECK RGB      
      state.A1_CHECK_GREEN:
        address.d = b0100101;
        cur_state = 43;
        statetemp.d = state.A1_SHIFT_GREEN;
      
      state.A1_SHIFT_GREEN:
        address.d = b0100100;
        cur_state = 44;
        statetemp.d = state.A1_MERGE_GREEN;      
      
      state.A1_MERGE_GREEN:
        address.d = b0100011;
        cur_state = 45;
        case (ra_data) {
          h4444:
            statetemp.d = state.END;
          default:
            statetemp.d = state.A1_CHECK_YELLOW;
        }

      state.A1_CHECK_YELLOW:
        address.d = b0100010;
        cur_state = 46;
        statetemp.d = state.A1_SHIFT_YELLOW;
      
      state.A1_SHIFT_YELLOW:
        address.d = b0100001;
        cur_state = 47;
        statetemp.d = state.A1_MERGE_YELLOW;

      state.A1_MERGE_YELLOW:
        address.d = b0100000;
        cur_state = 48;
        statetemp.d = state.A2D0;


//ATTEMPT 2

//ATTEMPT 2 DIGIT 1
      state.A2D0:
        address.d = b1010010;
        rb = c{12b0, keypad};
        cur_state = 49;
          if (black) {
            statetemp.d = state.A2D1_A;
          }

      state.A2D1_A:
        address.d = b1010001;
        cur_state = 50;
        statetemp.d = state.A2D1_B;

      state.A2D1_B:
        address.d = b0111011;
        cur_state = 51;
        statetemp.d = state.A2D1_C;

      state.A2D1_C:
        address.d = b0011111;
        cur_state = 52;
        statetemp.d = state.A2D1_D;

      state.A2D1_D:
        address.d = b0011110;
        cur_state = 53;
        statetemp.d = state.A2D1;

      state.A2D1:
        address.d = b1010000;
        cur_state = 54;
        rb = c{12b0, keypad};
        if (red) {
          statetemp.d = state.A2D1_E;
        }
        if (black) {
          statetemp.d = state.A2D2_A;
        }

      state.A2D1_E:
        address.d = b0011010;
        cur_state = 55;
        statetemp.d = state.A2D1_F;
    
      state.A2D1_F:
        address.d = b0011001;
        cur_state = 56;
        statetemp.d = state.A2D1_A;

//ATTEMPT 2 DIGIT 2
      state.A2D2_A:
        address.d = b1001111;
        cur_state = 57;
        statetemp.d = state.A2D2_B;

      state.A2D2_B:
        address.d = b0111000;
        cur_state = 58;
        statetemp.d = state.A2D2_C;

      state.A2D2_C:
        address.d = b1010000;
        cur_state = 59;
        statetemp.d = state.A2D2_D;

      state.A2D2_D:
        address.d = b0011101;
        cur_state = 60;
        statetemp.d = state.A2D2;

      state.A2D2:
        address.d = b1001110;
        cur_state = 61;
        rb = c{12b0, keypad};
        if (red) {
          statetemp.d = state.A2D2_E;
        }
        if (black) {
          statetemp.d = state.A2D3_A;
        }

      state.A2D2_E:
        address.d = b1001111;
        cur_state = 62;
        statetemp.d = state.A2D2_F;
    
      state.A2D2_F:
        address.d = b0011000;
        cur_state = 63;
        statetemp.d = state.A2D2_A;

//ATTEMPT 2 DIGIT 3
      state.A2D3_A:
        address.d = b1001101;
        cur_state = 64;
        statetemp.d = state.A2D3_B;

      state.A2D3_B:
        address.d = b0110110;
        cur_state = 65;
        statetemp.d = state.A2D3_C;

      state.A2D3_C:
        address.d = b1001110;
        cur_state = 66;
        statetemp.d = state.A2D3_D;

      state.A2D3_D:
        address.d = b0011100;
        cur_state = 67;
        statetemp.d = state.A2D3;

      state.A2D3:
        address.d = b1001100;
        cur_state = 68;
        rb = c{12b0, keypad};
        if (red) {
          statetemp.d = state.A2D2_E;
        }
        if (black) {
          statetemp.d = state.A2D4_A;
        }

      state.A2D3_E:
        address.d = b1001101;
        cur_state = 69;
        statetemp.d = state.A2D3_F;
    
      state.A2D3_F:
        address.d = b0010111;
        cur_state = 70;
        statetemp.d = state.A2D3_A;

//ATTEMPT 2 DIGIT 4
      state.A2D4_A:
        address.d = b1001011;
        cur_state = 71;
        statetemp.d = state.A2D4_B;

      state.A2D4_B:
        address.d = b0110100;
        cur_state = 72;
        statetemp.d = state.A2D4_C;

      state.A2D4_C:
        address.d = b1001100;
        cur_state = 73;
        statetemp.d = state.A2D4_D;

      state.A2D4_D:
        address.d = b0011011;
        cur_state = 74;
        statetemp.d = state.A2D4;

      state.A2D4:
        address.d = b1000010;
        cur_state = 75;
        if (red) {
          statetemp.d = state.A2D4_E;
        }
        if (black){
          statetemp.d = state.A2_MAX;
        }

      state.A2D4_E:
        address.d = b1001011;
        cur_state = 76;
        statetemp.d = state.A2D4_F;
    
      state.A2D3_F:
        address.d = b0010110;
        cur_state = 77;
        statetemp.d = state.A2D4_A;

//ATTEMPT 2 CHECK
      state.A2_MAX:
        address.d = b0010101;
        cur_state = 78;
        statetemp.d = state.A2_MIN;
      
      state.A2_MIN:
        address.d = b0010100;
        cur_state = 79;
        statetemp.d = state.A2_HINT;
      
      state.A2_HINT:
        address.d = b0101011;
        cur_state = 80;
        statetemp.d = state.A2_CMPEQ;

      state.A2_CMPEQ:
        address.d = b0101010;
        cur_state = 81;
        statetemp.d = state.A2_CHECK;

      state.A2_CHECK:
        address.d = b0101001;
        cur_state = 82;
        case (ra_data) {
            h0001:
              statetemp.d = state.COUNTER_A2;
            default:
              statetemp.d = state.A2D4;
        }

      state.COUNTER_A2:
        address.d = b0100111;
        cur_state = 83;
        statetemp.d = state.COUNTER_RGB_A2;


      state.COUNTER_RGB_A2:
        address.d = b0100110;
        cur_state = 84;
        statetemp.d = state.BRANCH_D1;

//BRANCH D1
      state.BRANCH_D1:
        address.d = b0010011;
        cur_state = 85;
        case (ra_data[15:12]) {
          h0001:
            statetemp.d = state.BRANCH_D2;
          default:
            statetemp.d = state.EXTRACT_A1D1;
        }
      
      state.EXTRACT_A1D1:
        address.d = b0010010;
        cur_state = 86;
        statetemp.d = state.BRANCH_D1_GY;

      state.BRANCH_D1_GY:
        address.d = b0010011;
        cur_state = 87;
        case (ra_data[15:12]) {
          h0004:
            statetemp.d = state.EXTRACT_A2D1;
        default:
            statetemp.d = state.COUNT_A1D1_IN_A1;
        }

      //SUBBRANCH 1
      state.EXTRACT_A2D1:	
        address.d = b0010001;	
        cur_state = 88;
        statetemp.d = state.D1G_CMPEQ;
      
      state.D1G_CMPEQ:	
        address.d = b0010000;	
        cur_state = 89;
        statetemp.d = state.D1_RETURN_BRANCH;
      
      //SUBBRANCH 2
      state.COUNT_A1D1_IN_A1:	
        address.d = b0001111;	
        cur_state = 90;
        statetemp.d = state.COUNT_A1D1_IN_A2;
      
      state.COUNT_A1D1_IN_A2:	
        address.d = b0001110;	
        cur_state = 91;
        statetemp.d = state.D1Y_CMPLE;
      
      state.D1Y_CMPLE:	
        address.d = b0001101;	
        cur_state = 92;
        statetemp.d = state.D1_RETURN_BRANCH;

      state.D1_RETURN_BRANCH:
        address.d = b0001100;
        cur_state = 93;
        case (ra_data) {
          h0000:
            statetemp.d = state.A2D4;
        default:
            statetemp.d = state.BRANCH_D2;
        }

//BRANCH D2
      state.BRANCH_D2:
        address.d = b0010011;
        cur_state = 94;
        case (ra_data[11:8]) {
          h0001:
            statetemp.d = state.BRANCH_D3;
          default:
            statetemp.d = state.EXTRACT_A1D2;
        }

      state.EXTRACT_A1D2:	
        address.d = b0001011;	
        cur_state = 95;
        statetemp.d = state.BRANCH_D2_GY;

      state.BRANCH_D2_GY:
        address.d = b0010011;
        cur_state = 96;
        case (ra_data[11:8]) {
          h0004:
            statetemp.d = state.EXTRACT_A2D2;
        default:
            statetemp.d = state.COUNT_A1D2_IN_A1;
        }

      //SUBBRANCH 1
      state.EXTRACT_A2D2:	
        address.d = b0001010;	
        cur_state = 97;
        statetemp.d = state.D2G_CMPEQ;
      
      state.D2G_CMPEQ:	
        address.d = b0010000;
        cur_state = 98;
        statetemp.d = state.D2_RETURN_BRANCH;
      
      //SUBBRANCH 2      
      state.COUNT_A1D2_IN_A1:	
        address.d = b0001111;	
        cur_state = 99;
        statetemp.d = state.COUNT_A1D2_IN_A2;
      
      state.COUNT_A1D2_IN_A2:	
        address.d = b0001110;	
        cur_state = 100;
        statetemp.d = state.D2Y_CMPLE;
        
      state.D2Y_CMPLE:	
        address.d = b0001101;	
        cur_state = 101;
        statetemp.d = state.D2_RETURN_BRANCH;

      state.D2_RETURN_BRANCH:
        address.d = b0001100;
        cur_state = 102;
        case (ra_data) {
          h0000:
            statetemp.d = state.A2D4;
        default:
            statetemp.d = state.BRANCH_D3;
        }

//BRANCH D3
      state.BRANCH_D3:
        address.d = b0010011;
        cur_state = 103;
        case (ra_data[7:4]) {
          h0001:
            statetemp.d = state.BRANCH_D4;
          default:
            statetemp.d = state.EXTRACT_A1D3;
        }

      state.EXTRACT_A1D3:	
        address.d = b0001001;	
        cur_state = 104;
        statetemp.d = state.BRANCH_D3_GY;

      state.BRANCH_D3_GY:
        address.d = b0010011;
        cur_state = 105;
        case (ra_data[7:4]) {
          h0004:
            statetemp.d = state.EXTRACT_A2D3;
        default:
            statetemp.d = state.COUNT_A1D3_IN_A1;
        }

      //SUBBRANCH 1
      state.EXTRACT_A2D3:	
        address.d = b0001000;	
        cur_state = 106;
        statetemp.d = state.D3G_CMPEQ;
      
      state.D3G_CMPEQ:	
        address.d = b0010000;
        cur_state = 107;
        statetemp.d = state.D3_RETURN_BRANCH;
      
      //SUBBRANCH 2      
      state.COUNT_A1D3_IN_A1:	
        address.d = b0001111;	
        cur_state = 108;
        statetemp.d = state.COUNT_A1D3_IN_A2;
      
      state.COUNT_A1D3_IN_A2:	
        address.d = b0001110;	
        cur_state = 109;
        statetemp.d = state.D3Y_CMPLE;
        
      state.D3Y_CMPLE:	
        address.d = b0001101;	
        cur_state = 110;
        statetemp.d = state.D3_RETURN_BRANCH;

      state.D3_RETURN_BRANCH:
        address.d = b0001100;
        cur_state = 111;
        case (ra_data) {
          h0000:
            statetemp.d = state.A2D4;
        default:
            statetemp.d = state.BRANCH_D4;
        }

//BRANCH D4
      state.BRANCH_D4:
        address.d = b0010011;
        cur_state = 112;
        case (ra_data[3:0]) {
          h0001:
            statetemp.d = state.A2_CHECK_GREEN;
          default:
            statetemp.d = state.EXTRACT_A1D4;
        }

      state.EXTRACT_A1D4:	
        address.d = b0000111;	
        cur_state = 113;
        statetemp.d = state.BRANCH_D4_GY;

      state.BRANCH_D4_GY:
        address.d = b0010011;
        cur_state = 114;
        case (ra_data[3:0]) {
          h0004:
            statetemp.d = state.EXTRACT_A2D4;
        default:
            statetemp.d = state.COUNT_A1D3_IN_A1;
        }

      //SUBBRANCH 1
      state.EXTRACT_A2D4:	
        address.d = b0000110;	
        cur_state = 115;
        statetemp.d = state.D4G_CMPEQ;
      
      state.D4G_CMPEQ:	
        address.d = b0010000;
        cur_state = 116;
        statetemp.d = state.D4_RETURN_BRANCH;
      
      //SUBBRANCH 2      
      state.COUNT_A1D4_IN_A1:	
        address.d = b0001111;	
        cur_state = 117;
        statetemp.d = state.COUNT_A1D4_IN_A2;
      
      state.COUNT_A1D4_IN_A2:	
        address.d = b0001110;	
        cur_state = 118;
        statetemp.d = state.D4Y_CMPLE;
        
      state.D4Y_CMPLE:	
        address.d = b0001101;	
        cur_state = 119;
        statetemp.d = state.D4_RETURN_BRANCH;

      state.D4_RETURN_BRANCH:
        address.d = b0001100;
        cur_state = 120;
        case (ra_data) {
          h0000:
            statetemp.d = state.A2D4;
        default:
            statetemp.d = state.A2_CHECK_GREEN;
        }

//ATTEMPT 2 CHECK RGB  
      state.A2_CHECK_GREEN:	
        address.d = b0000101;	
        cur_state = 121;
        statetemp.d = state.A2_SHIFT_GREEN;
      
      state.A2_SHIFT_GREEN:	
        address.d = b0100100;
        cur_state = 122;	
        statetemp.d = state.A2_MERGE_GREEN;
      
      state.A2_MERGE_GREEN:	
        address.d = b0000100;
        cur_state = 123;
        case (ra_data) {
          h4444:
            statetemp.d = state.END;
        default:
            statetemp.d = state.A2_CHECK_YELLOW;
        }	

      state.A2_CHECK_YELLOW:	
        address.d = b0000011;	
        cur_state = 124;
        statetemp.d = state.A2_SHIFT_YELLOW;
      
      state.A2_SHIFT_YELLOW:	
        address.d = b0100001;	
        cur_state = 125;
        statetemp.d = state.A2_MERGE_YELLOW;
      
      state.A2_MERGE_YELLOW:	
        address.d = b0000010;	
        cur_state = 126;
        statetemp.d = state.MIGRATE_A2_DIGIT;

//SHIFT ATTEMPT 2 TO ATTEMPT 1      
      state.MIGRATE_A2_DIGIT:	
        address.d = b0000001;	
        cur_state = 127;
        statetemp.d = state.MIGRATE_A2_RGB;
      
      state.MIGRATE_A2_RGB:	
        address.d = b0000000;
        cur_state = 128;	
        statetemp.d = state.RESET_A2_DIGIT;
      
      state.RESET_A2_DIGIT:	
        address.d = b1001000;	
        cur_state = 129;
        statetemp.d = state.RESET_A2_RGB;
      
      state.RESET_A2_RGB:	
        address.d = b1000111;	
        cur_state = 130;
        statetemp.d = state.A2D0;

//END RESET
      state.END:
        address.d = b1000010;
        cur_state = 131;
        if (black || red) { // if enter/delete is pressed
          statetemp.d = state.RESET_A1;
        }

      state.RESET_A1:
        address.d = b1001010;
        cur_state = 132;
        statetemp.d = state.RESET_A2;
      
      state.RESET_A2:
        address.d = b1001000;
        cur_state = 133;
        statetemp.d = state.RESET_A1_RGB;
      
      state.RESET_A1_RGB:
        address.d = b1001001;
        cur_state = 134;
        statetemp.d = state.RESET_A2_RGB_2;

      state.RESET_A2_RGB_2:
        address.d = b1000111;
        cur_state = 135;
        statetemp.d = state.RESET_HINT;

      state.RESET_HINT:
        address.d = b1000110;
        cur_state = 136;
        statetemp.d = state.RESET_HINT_RGB;

      state.RESET_HINT_RGB:
        address.d = b1000101;
        cur_state = 137;
        statetemp.d = state.RESET_COUNTER;
      
      state.RESET_COUNTER:
        address.d = b1000100;
        cur_state = 138;
        statetemp.d = state.RESET_COUNTER_RGB;
      
      state.RESET_COUNTER_RGB:
        address.d = b1000011;
        cur_state = 139;
        rng.next = 1;
        statetemp.d = state.ANSWER_GENERATION;

    }
  }
}

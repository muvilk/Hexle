/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  reg next;
  
  reg [15:0] debug_pcsel;
  
  reg [15:0] debug_asel;
  
  reg [15:0] debug_bsel;
  
  reg [15:0] debug_wdsel;
  
  wire [32-1:0] M_motherboard_id;
  wire [32-1:0] M_motherboard_ia;
  wire [32-1:0] M_motherboard_ma;
  wire [32-1:0] M_motherboard_mrd;
  wire [32-1:0] M_motherboard_mwd;
  wire [32-1:0] M_motherboard_output_buffer;
  wire [32-1:0] M_motherboard_input_buffer;
  wire [64-1:0] M_motherboard_debug;
  reg [3-1:0] M_motherboard_irq;
  reg [1-1:0] M_motherboard_slowclk;
  motherboard_1 motherboard (
    .clk(clk),
    .rst(rst),
    .irq(M_motherboard_irq),
    .slowclk(M_motherboard_slowclk),
    .id(M_motherboard_id),
    .ia(M_motherboard_ia),
    .ma(M_motherboard_ma),
    .mrd(M_motherboard_mrd),
    .mwd(M_motherboard_mwd),
    .output_buffer(M_motherboard_output_buffer),
    .input_buffer(M_motherboard_input_buffer),
    .debug(M_motherboard_debug)
  );
  
  reg M_next_button_d, M_next_button_q = 1'h0;
  
  wire [1-1:0] M_next_button_conditioner_out;
  reg [1-1:0] M_next_button_conditioner_in;
  button_conditioner_2 next_button_conditioner (
    .clk(clk),
    .in(M_next_button_conditioner_in),
    .out(M_next_button_conditioner_out)
  );
  
  wire [1-1:0] M_next_button_edge_out;
  reg [1-1:0] M_next_button_edge_in;
  edge_detector_3 next_button_edge (
    .clk(clk),
    .in(M_next_button_edge_in),
    .out(M_next_button_edge_out)
  );
  
  wire [(2'h3+0)-1:0] M_interrupt_button_conditioner_out;
  reg [(2'h3+0)-1:0] M_interrupt_button_conditioner_in;
  
  genvar GEN_interrupt_button_conditioner0;
  generate
  for (GEN_interrupt_button_conditioner0=0;GEN_interrupt_button_conditioner0<2'h3;GEN_interrupt_button_conditioner0=GEN_interrupt_button_conditioner0+1) begin: interrupt_button_conditioner_gen_0
    button_conditioner_2 interrupt_button_conditioner (
      .clk(clk),
      .in(M_interrupt_button_conditioner_in[GEN_interrupt_button_conditioner0*(1)+(1)-1-:(1)]),
      .out(M_interrupt_button_conditioner_out[GEN_interrupt_button_conditioner0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(2'h3+0)-1:0] M_interrupt_button_edge_out;
  reg [(2'h3+0)-1:0] M_interrupt_button_edge_in;
  
  genvar GEN_interrupt_button_edge0;
  generate
  for (GEN_interrupt_button_edge0=0;GEN_interrupt_button_edge0<2'h3;GEN_interrupt_button_edge0=GEN_interrupt_button_edge0+1) begin: interrupt_button_edge_gen_0
    edge_detector_3 interrupt_button_edge (
      .clk(clk),
      .in(M_interrupt_button_edge_in[GEN_interrupt_button_edge0*(1)+(1)-1-:(1)]),
      .out(M_interrupt_button_edge_out[GEN_interrupt_button_edge0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [28-1:0] M_frequency_divider_value;
  counter_4 frequency_divider (
    .clk(clk),
    .rst(rst),
    .value(M_frequency_divider_value)
  );
  
  wire [1-1:0] M_slowclock_edge_out;
  reg [1-1:0] M_slowclock_edge_in;
  edge_detector_3 slowclock_edge (
    .clk(clk),
    .in(M_slowclock_edge_in),
    .out(M_slowclock_edge_out)
  );
  
  wire [1-1:0] M_fastclock_edge_out;
  reg [1-1:0] M_fastclock_edge_in;
  edge_detector_3 fastclock_edge (
    .clk(clk),
    .in(M_fastclock_edge_in),
    .out(M_fastclock_edge_out)
  );
  
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_5 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_6 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    M_next_button_d = M_next_button_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    io_led = 24'h000000;
    usb_tx = usb_rx;
    io_seg = 8'hff;
    io_sel = 4'hf;
    led = {3'h0, io_button};
    io_led[16+7+0-:1] = io_dip[16+7+0-:1];
    io_led[16+6+0-:1] = io_dip[16+6+0-:1];
    io_led[16+5+0-:1] = M_frequency_divider_value[27+0-:1];
    io_led[16+4+0-:1] = M_frequency_divider_value[25+0-:1];
    M_next_button_conditioner_in = io_button[4+0-:1];
    M_next_button_edge_in = M_next_button_conditioner_out;
    M_next_button_d = M_next_button_edge_out;
    M_slowclock_edge_in = M_frequency_divider_value[27+0-:1];
    M_fastclock_edge_in = M_frequency_divider_value[25+0-:1];
    M_interrupt_button_conditioner_in = io_button[0+2-:3];
    M_interrupt_button_edge_in = M_interrupt_button_conditioner_out;
    M_motherboard_irq = M_interrupt_button_edge_out;
    next = (M_slowclock_edge_out & io_dip[16+7+0-:1]) | M_next_button_q;
    if (io_dip[16+6+0-:1]) begin
      next = (M_fastclock_edge_out & io_dip[16+7+0-:1]) | M_next_button_q;
    end
    M_motherboard_slowclk = next;
    M_seg_values = 16'h0000;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    debug_pcsel = M_motherboard_debug[0+15-:16];
    debug_asel = M_motherboard_debug[16+15-:16];
    debug_bsel = M_motherboard_debug[32+15-:16];
    debug_wdsel = M_motherboard_debug[48+15-:16];
    
    case (io_dip[0+7-:8])
      8'h00: begin
        io_led[0+7-:8] = M_motherboard_id[16+7-:8];
        io_led[8+7-:8] = M_motherboard_id[24+7-:8];
        M_seg_values = {M_motherboard_id[28+3-:4], M_motherboard_id[24+3-:4], M_motherboard_id[20+3-:4], M_motherboard_id[16+3-:4]};
      end
      8'h01: begin
        io_led[0+7-:8] = M_motherboard_id[0+7-:8];
        io_led[8+7-:8] = M_motherboard_id[8+7-:8];
        M_seg_values = {M_motherboard_id[12+3-:4], M_motherboard_id[8+3-:4], M_motherboard_id[4+3-:4], M_motherboard_id[0+3-:4]};
      end
      8'h02: begin
        io_led[0+7-:8] = M_motherboard_ia[0+7-:8];
        io_led[8+7-:8] = M_motherboard_ia[8+7-:8];
        M_seg_values = {M_motherboard_ia[12+3-:4], M_motherboard_ia[8+3-:4], M_motherboard_ia[4+3-:4], M_motherboard_ia[0+3-:4]};
      end
      8'h03: begin
        io_led[0+7-:8] = M_motherboard_ma[0+7-:8];
        io_led[8+7-:8] = M_motherboard_ma[8+7-:8];
        M_seg_values = {M_motherboard_ma[12+3-:4], M_motherboard_ma[8+3-:4], M_motherboard_ma[4+3-:4], M_motherboard_ma[0+3-:4]};
      end
      8'h04: begin
        io_led[0+7-:8] = M_motherboard_ma[16+7-:8];
        io_led[8+7-:8] = M_motherboard_ma[24+7-:8];
        M_seg_values = {M_motherboard_ma[28+3-:4], M_motherboard_ma[24+3-:4], M_motherboard_ma[20+3-:4], M_motherboard_ma[16+3-:4]};
      end
      8'h05: begin
        io_led[0+7-:8] = M_motherboard_mrd[0+7-:8];
        io_led[8+7-:8] = M_motherboard_mrd[8+7-:8];
        M_seg_values = {M_motherboard_mrd[12+3-:4], M_motherboard_mrd[8+3-:4], M_motherboard_mrd[4+3-:4], M_motherboard_mrd[0+3-:4]};
      end
      8'h06: begin
        io_led[0+7-:8] = M_motherboard_mrd[16+7-:8];
        io_led[8+7-:8] = M_motherboard_mrd[24+7-:8];
        M_seg_values = {M_motherboard_mrd[28+3-:4], M_motherboard_mrd[24+3-:4], M_motherboard_mrd[20+3-:4], M_motherboard_mrd[16+3-:4]};
      end
      8'h07: begin
        io_led[0+7-:8] = M_motherboard_mwd[0+7-:8];
        io_led[8+7-:8] = M_motherboard_mwd[8+7-:8];
        M_seg_values = {M_motherboard_mwd[12+3-:4], M_motherboard_mwd[8+3-:4], M_motherboard_mwd[4+3-:4], M_motherboard_mwd[0+3-:4]};
      end
      8'h08: begin
        io_led[0+7-:8] = M_motherboard_mwd[16+7-:8];
        io_led[8+7-:8] = M_motherboard_mwd[24+7-:8];
        M_seg_values = {M_motherboard_mwd[28+3-:4], M_motherboard_mwd[24+3-:4], M_motherboard_mwd[20+3-:4], M_motherboard_mwd[16+3-:4]};
      end
      8'h09: begin
        io_led[0+7-:8] = debug_pcsel[0+7-:8];
        io_led[8+7-:8] = debug_pcsel[8+7-:8];
        M_seg_values = {debug_pcsel[12+3-:4], debug_pcsel[8+3-:4], debug_pcsel[4+3-:4], debug_pcsel[0+3-:4]};
      end
      8'h0a: begin
        io_led[0+7-:8] = debug_asel[0+7-:8];
        io_led[8+7-:8] = debug_asel[8+7-:8];
        M_seg_values = {debug_asel[12+3-:4], debug_asel[8+3-:4], debug_asel[4+3-:4], debug_asel[0+3-:4]};
      end
      8'h0b: begin
        io_led[0+7-:8] = debug_bsel[0+7-:8];
        io_led[8+7-:8] = debug_bsel[8+7-:8];
        M_seg_values = {debug_bsel[12+3-:4], debug_bsel[8+3-:4], debug_bsel[4+3-:4], debug_bsel[0+3-:4]};
      end
      8'h0c: begin
        io_led[0+7-:8] = debug_wdsel[0+7-:8];
        io_led[8+7-:8] = debug_wdsel[8+7-:8];
        M_seg_values = {debug_wdsel[12+3-:4], debug_wdsel[8+3-:4], debug_wdsel[4+3-:4], debug_wdsel[0+3-:4]};
      end
      8'h0d: begin
        io_led[0+7-:8] = M_motherboard_ia[24+7-:8];
        io_led[8+7-:8] = M_motherboard_ia[16+7-:8];
        M_seg_values = {M_motherboard_ia[28+3-:4], M_motherboard_ia[24+3-:4], M_motherboard_ia[20+3-:4], M_motherboard_ia[16+3-:4]};
      end
      8'h0e: begin
        io_led[0+15-:16] = {M_motherboard_input_buffer[8+7-:8], M_motherboard_input_buffer[0+7-:8]};
        M_seg_values = {M_motherboard_input_buffer[12+3-:4], M_motherboard_input_buffer[8+3-:4], M_motherboard_input_buffer[4+3-:4], M_motherboard_input_buffer[0+3-:4]};
      end
      8'h0f: begin
        io_led[0+15-:16] = {M_motherboard_output_buffer[8+7-:8], M_motherboard_output_buffer[0+7-:8]};
        M_seg_values = {M_motherboard_output_buffer[12+3-:4], M_motherboard_output_buffer[8+3-:4], M_motherboard_output_buffer[4+3-:4], M_motherboard_output_buffer[0+3-:4]};
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_next_button_q <= M_next_button_d;
  end
  
endmodule

/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn_signal;
  alu_1 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn_signal(M_alu_alufn_signal),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [(3'h5+0)-1:0] M_button_conditioner_out;
  reg [(3'h5+0)-1:0] M_button_conditioner_in;
  
  genvar GEN_button_conditioner0;
  generate
  for (GEN_button_conditioner0=0;GEN_button_conditioner0<3'h5;GEN_button_conditioner0=GEN_button_conditioner0+1) begin: button_conditioner_gen_0
    button_conditioner_3 button_conditioner (
      .clk(clk),
      .in(M_button_conditioner_in[GEN_button_conditioner0*(1)+(1)-1-:(1)]),
      .out(M_button_conditioner_out[GEN_button_conditioner0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [(3'h5+0)-1:0] M_edge_detector_manual_out;
  reg [(3'h5+0)-1:0] M_edge_detector_manual_in;
  
  genvar GEN_edge_detector_manual0;
  generate
  for (GEN_edge_detector_manual0=0;GEN_edge_detector_manual0<3'h5;GEN_edge_detector_manual0=GEN_edge_detector_manual0+1) begin: edge_detector_manual_gen_0
    edge_detector_4 edge_detector_manual (
      .clk(clk),
      .in(M_edge_detector_manual_in[GEN_edge_detector_manual0*(1)+(1)-1-:(1)]),
      .out(M_edge_detector_manual_out[GEN_edge_detector_manual0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [1-1:0] M_edge_detector_auto_out;
  reg [1-1:0] M_edge_detector_auto_in;
  edge_detector_4 edge_detector_auto (
    .clk(clk),
    .in(M_edge_detector_auto_in),
    .out(M_edge_detector_auto_out)
  );
  reg [15:0] M_a_d, M_a_q = 1'h0;
  reg [15:0] M_b_d, M_b_q = 1'h0;
  reg [5:0] M_alufn_d, M_alufn_q = 1'h0;
  reg [15:0] M_out_d, M_out_q = 1'h0;
  reg [15:0] M_ans_d, M_ans_q = 1'h0;
  localparam A_alu_runner = 2'd0;
  localparam B_alu_runner = 2'd1;
  localparam OUT_alu_runner = 2'd2;
  
  reg [1:0] M_alu_runner_d, M_alu_runner_q = A_alu_runner;
  wire [7-1:0] M_seg_seg;
  wire [2-1:0] M_seg_sel;
  reg [8-1:0] M_seg_values;
  multi_seven_seg_5 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [8-1:0] M_dec_ctr_digits;
  reg [1-1:0] M_dec_ctr_inc;
  multi_dec_ctr_6 dec_ctr (
    .clk(clk),
    .rst(rst),
    .inc(M_dec_ctr_inc),
    .digits(M_dec_ctr_digits)
  );
  
  wire [1-1:0] M_slowclock_value;
  counter_7 slowclock (
    .clk(clk),
    .rst(M_edge_detector_manual_out[0+0-:1]),
    .value(M_slowclock_value)
  );
  
  wire [16-1:0] M_autotester_alu_a;
  wire [16-1:0] M_autotester_alu_b;
  wire [16-1:0] M_autotester_alu_output;
  wire [6-1:0] M_autotester_alu_alufn;
  autotester_8 autotester (
    .clk(M_slowclock_value),
    .rst(rst),
    .alu_a(M_autotester_alu_a),
    .alu_b(M_autotester_alu_b),
    .alu_output(M_autotester_alu_output),
    .alu_alufn(M_autotester_alu_alufn)
  );
  
  always @* begin
    M_alu_runner_d = M_alu_runner_q;
    M_a_d = M_a_q;
    M_b_d = M_b_q;
    M_ans_d = M_ans_q;
    M_alufn_d = M_alufn_q;
    M_out_d = M_out_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'h00;
    io_sel = 4'h0;
    M_edge_detector_auto_in = M_slowclock_value;
    M_dec_ctr_inc = M_edge_detector_auto_out;
    M_seg_values = M_dec_ctr_digits;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_button_conditioner_in = io_button;
    M_edge_detector_manual_in = M_button_conditioner_out;
    
    case (io_dip[16+7+0-:1])
      1'h0: begin
        
        case (M_alu_runner_q)
          A_alu_runner: begin
            M_a_d = {io_dip[8+7-:8], io_dip[0+7-:8]};
            io_led[8+7-:8] = M_a_q[8+7-:8];
            io_led[0+7-:8] = M_a_q[0+7-:8];
            io_led[16+5+2-:3] = 3'h4;
            if (M_edge_detector_manual_out[1+0-:1]) begin
              M_alu_runner_d = B_alu_runner;
            end
          end
          B_alu_runner: begin
            M_b_d = {io_dip[8+7-:8], io_dip[0+7-:8]};
            io_led[8+7-:8] = M_b_q[8+7-:8];
            io_led[0+7-:8] = M_b_q[0+7-:8];
            io_led[16+5+2-:3] = 3'h6;
            if (M_edge_detector_manual_out[1+0-:1]) begin
              M_alu_runner_d = OUT_alu_runner;
            end
          end
          OUT_alu_runner: begin
            io_led[8+7-:8] = M_alu_out[8+7-:8];
            io_led[0+7-:8] = M_alu_out[0+7-:8];
            io_led[16+5+2-:3] = 3'h7;
            if (M_edge_detector_manual_out[1+0-:1]) begin
              M_alu_runner_d = A_alu_runner;
            end
          end
        endcase
        M_alufn_d = io_dip[16+0+5-:6];
        M_out_d = M_alu_out;
      end
      1'h1: begin
        M_a_d = M_autotester_alu_a;
        M_b_d = M_autotester_alu_b;
        M_alufn_d = M_autotester_alu_alufn;
        M_ans_d = M_autotester_alu_output;
        io_led[8+7-:8] = M_alu_out[8+7-:8];
        io_led[0+7-:8] = M_alu_out[0+7-:8];
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        
        case (io_dip[16+6+0-:1])
          1'h0: begin
            M_out_d = M_alu_out;
          end
          1'h1: begin
            M_out_d = (M_alu_out[0+0-:1] == 1'h0) ? {M_alu_out[1+14-:15], 1'h1} : {M_alu_out[1+14-:15], 1'h0};
          end
        endcase
        io_led[16+7+0-:1] = ((M_out_q == M_ans_q) == 1'h1) ? 1'h1 : 1'h0;
      end
    endcase
    
    case (M_alufn_q[1+4-:5])
      5'h00: begin
        io_led[16+2+0-:1] = M_alu_z;
        io_led[16+1+0-:1] = M_alu_v;
        io_led[16+0+0-:1] = M_alu_n;
      end
    endcase
    M_alu_a = M_a_q;
    M_alu_b = M_b_q;
    M_alu_alufn_signal = M_alufn_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_a_q <= 1'h0;
      M_b_q <= 1'h0;
      M_alufn_q <= 1'h0;
      M_out_q <= 1'h0;
      M_ans_q <= 1'h0;
      M_alu_runner_q <= 1'h0;
    end else begin
      M_a_q <= M_a_d;
      M_b_q <= M_b_d;
      M_alufn_q <= M_alufn_d;
      M_out_q <= M_out_d;
      M_ans_q <= M_ans_d;
      M_alu_runner_q <= M_alu_runner_d;
    end
  end
  
endmodule

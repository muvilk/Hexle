/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module boolean_10 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn_signal,
    output reg [15:0] bool
  );
  
  
  
  wire [(5'h10+0)-1:0] M_mux_4_16_out;
  reg [(5'h10+0)-1:0] M_mux_4_16_s0;
  reg [(5'h10+0)-1:0] M_mux_4_16_s1;
  reg [(5'h10+0)*4-1:0] M_mux_4_16_in;
  
  genvar GEN_mux_4_160;
  generate
  for (GEN_mux_4_160=0;GEN_mux_4_160<5'h10;GEN_mux_4_160=GEN_mux_4_160+1) begin: mux_4_16_gen_0
    mux_4_16 mux_4_16 (
      .s0(M_mux_4_16_s0[GEN_mux_4_160*(1)+(1)-1-:(1)]),
      .s1(M_mux_4_16_s1[GEN_mux_4_160*(1)+(1)-1-:(1)]),
      .in(M_mux_4_16_in[GEN_mux_4_160*(3'h4)+(3'h4)-1-:(3'h4)]),
      .out(M_mux_4_16_out[GEN_mux_4_160*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  always @* begin
    M_mux_4_16_in = {5'h10{{alufn_signal[0+3-:4]}}};
    M_mux_4_16_s0 = a;
    M_mux_4_16_s1 = b;
    bool = M_mux_4_16_out;
  end
endmodule

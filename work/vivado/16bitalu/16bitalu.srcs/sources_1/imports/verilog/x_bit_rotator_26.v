/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module x_bit_rotator_26 (
    input [15:0] a,
    input [3:0] b,
    input [5:0] alufn_signal,
    output reg [15:0] out
  );
  
  
  
  wire [(5'h10+0)-1:0] M_mux_2_8_out;
  reg [(5'h10+0)-1:0] M_mux_2_8_s0;
  reg [(5'h10+0)-1:0] M_mux_2_8_g0;
  reg [(5'h10+0)-1:0] M_mux_2_8_g1;
  
  genvar GEN_mux_2_80;
  generate
  for (GEN_mux_2_80=0;GEN_mux_2_80<5'h10;GEN_mux_2_80=GEN_mux_2_80+1) begin: mux_2_8_gen_0
    mux_2_15 mux_2_8 (
      .s0(M_mux_2_8_s0[GEN_mux_2_80*(1)+(1)-1-:(1)]),
      .g0(M_mux_2_8_g0[GEN_mux_2_80*(1)+(1)-1-:(1)]),
      .g1(M_mux_2_8_g1[GEN_mux_2_80*(1)+(1)-1-:(1)]),
      .out(M_mux_2_8_out[GEN_mux_2_80*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(5'h10+0)-1:0] M_mux_2_4_out;
  reg [(5'h10+0)-1:0] M_mux_2_4_s0;
  reg [(5'h10+0)-1:0] M_mux_2_4_g0;
  reg [(5'h10+0)-1:0] M_mux_2_4_g1;
  
  genvar GEN_mux_2_40;
  generate
  for (GEN_mux_2_40=0;GEN_mux_2_40<5'h10;GEN_mux_2_40=GEN_mux_2_40+1) begin: mux_2_4_gen_0
    mux_2_15 mux_2_4 (
      .s0(M_mux_2_4_s0[GEN_mux_2_40*(1)+(1)-1-:(1)]),
      .g0(M_mux_2_4_g0[GEN_mux_2_40*(1)+(1)-1-:(1)]),
      .g1(M_mux_2_4_g1[GEN_mux_2_40*(1)+(1)-1-:(1)]),
      .out(M_mux_2_4_out[GEN_mux_2_40*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(5'h10+0)-1:0] M_mux_2_2_out;
  reg [(5'h10+0)-1:0] M_mux_2_2_s0;
  reg [(5'h10+0)-1:0] M_mux_2_2_g0;
  reg [(5'h10+0)-1:0] M_mux_2_2_g1;
  
  genvar GEN_mux_2_20;
  generate
  for (GEN_mux_2_20=0;GEN_mux_2_20<5'h10;GEN_mux_2_20=GEN_mux_2_20+1) begin: mux_2_2_gen_0
    mux_2_15 mux_2_2 (
      .s0(M_mux_2_2_s0[GEN_mux_2_20*(1)+(1)-1-:(1)]),
      .g0(M_mux_2_2_g0[GEN_mux_2_20*(1)+(1)-1-:(1)]),
      .g1(M_mux_2_2_g1[GEN_mux_2_20*(1)+(1)-1-:(1)]),
      .out(M_mux_2_2_out[GEN_mux_2_20*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(5'h10+0)-1:0] M_mux_2_1_out;
  reg [(5'h10+0)-1:0] M_mux_2_1_s0;
  reg [(5'h10+0)-1:0] M_mux_2_1_g0;
  reg [(5'h10+0)-1:0] M_mux_2_1_g1;
  
  genvar GEN_mux_2_10;
  generate
  for (GEN_mux_2_10=0;GEN_mux_2_10<5'h10;GEN_mux_2_10=GEN_mux_2_10+1) begin: mux_2_1_gen_0
    mux_2_15 mux_2_1 (
      .s0(M_mux_2_1_s0[GEN_mux_2_10*(1)+(1)-1-:(1)]),
      .g0(M_mux_2_1_g0[GEN_mux_2_10*(1)+(1)-1-:(1)]),
      .g1(M_mux_2_1_g1[GEN_mux_2_10*(1)+(1)-1-:(1)]),
      .out(M_mux_2_1_out[GEN_mux_2_10*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  always @* begin
    M_mux_2_8_s0 = {5'h10{b[3+0-:1]}};
    M_mux_2_4_s0 = {5'h10{b[2+0-:1]}};
    M_mux_2_2_s0 = {5'h10{b[1+0-:1]}};
    M_mux_2_1_s0 = {5'h10{b[0+0-:1]}};
    M_mux_2_8_g0 = a;
    M_mux_2_4_g0 = M_mux_2_8_out;
    M_mux_2_2_g0 = M_mux_2_4_out;
    M_mux_2_1_g0 = M_mux_2_2_out;
    
    case (alufn_signal)
      6'h28: begin
        M_mux_2_8_g1 = {a[0+7-:8], a[8+7-:8]};
        M_mux_2_4_g1 = {M_mux_2_8_out[0+11-:12], M_mux_2_8_out[12+3-:4]};
        M_mux_2_2_g1 = {M_mux_2_4_out[0+13-:14], M_mux_2_4_out[14+1-:2]};
        M_mux_2_1_g1 = {M_mux_2_2_out[0+14-:15], M_mux_2_2_out[15+0-:1]};
        out = M_mux_2_1_out;
      end
      6'h2c: begin
        M_mux_2_8_g1 = {a[0+7-:8], a[8+7-:8]};
        M_mux_2_4_g1 = {M_mux_2_8_out[0+3-:4], M_mux_2_8_out[4+11-:12]};
        M_mux_2_2_g1 = {M_mux_2_4_out[0+1-:2], M_mux_2_4_out[2+13-:14]};
        M_mux_2_1_g1 = {M_mux_2_2_out[0+0-:1], M_mux_2_2_out[1+14-:15]};
        out = M_mux_2_1_out;
      end
      default: begin
        M_mux_2_8_g1 = 16'h0000;
        M_mux_2_4_g1 = 16'h0000;
        M_mux_2_2_g1 = 16'h0000;
        M_mux_2_1_g1 = 16'h0000;
        out = 16'h0000;
      end
    endcase
  end
endmodule

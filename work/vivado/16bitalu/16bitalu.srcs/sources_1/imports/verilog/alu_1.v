/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_1 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn_signal,
    output reg [15:0] out,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [16-1:0] M_adder_out;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [16-1:0] M_adder_a;
  reg [16-1:0] M_adder_b;
  reg [6-1:0] M_adder_alufn_signal;
  adder_9 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .alufn_signal(M_adder_alufn_signal),
    .out(M_adder_out),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  wire [16-1:0] M_boolean_bool;
  reg [16-1:0] M_boolean_a;
  reg [16-1:0] M_boolean_b;
  reg [6-1:0] M_boolean_alufn_signal;
  boolean_10 boolean (
    .a(M_boolean_a),
    .b(M_boolean_b),
    .alufn_signal(M_boolean_alufn_signal),
    .bool(M_boolean_bool)
  );
  
  wire [16-1:0] M_shifter_shift;
  reg [16-1:0] M_shifter_a;
  reg [4-1:0] M_shifter_b;
  reg [6-1:0] M_shifter_alufn_signal;
  shifter_11 shifter (
    .a(M_shifter_a),
    .b(M_shifter_b),
    .alufn_signal(M_shifter_alufn_signal),
    .shift(M_shifter_shift)
  );
  
  wire [1-1:0] M_compare_cmp;
  reg [1-1:0] M_compare_z;
  reg [1-1:0] M_compare_v;
  reg [1-1:0] M_compare_n;
  reg [6-1:0] M_compare_alufn_signal;
  compare_12 compare (
    .z(M_compare_z),
    .v(M_compare_v),
    .n(M_compare_n),
    .alufn_signal(M_compare_alufn_signal),
    .cmp(M_compare_cmp)
  );
  
  wire [16-1:0] M_multiplier_mul;
  reg [16-1:0] M_multiplier_a;
  reg [16-1:0] M_multiplier_b;
  multiplier_13 multiplier (
    .a(M_multiplier_a),
    .b(M_multiplier_b),
    .mul(M_multiplier_mul)
  );
  
  wire [16-1:0] M_rotator_out;
  reg [16-1:0] M_rotator_a;
  reg [4-1:0] M_rotator_b;
  reg [6-1:0] M_rotator_alufn_signal;
  rotator_14 rotator (
    .a(M_rotator_a),
    .b(M_rotator_b),
    .alufn_signal(M_rotator_alufn_signal),
    .out(M_rotator_out)
  );
  
  wire [(5'h10+0)-1:0] M_mux_a_out;
  reg [(5'h10+0)-1:0] M_mux_a_s0;
  reg [(5'h10+0)-1:0] M_mux_a_g0;
  reg [(5'h10+0)-1:0] M_mux_a_g1;
  
  genvar GEN_mux_a0;
  generate
  for (GEN_mux_a0=0;GEN_mux_a0<5'h10;GEN_mux_a0=GEN_mux_a0+1) begin: mux_a_gen_0
    mux_2_15 mux_a (
      .s0(M_mux_a_s0[GEN_mux_a0*(1)+(1)-1-:(1)]),
      .g0(M_mux_a_g0[GEN_mux_a0*(1)+(1)-1-:(1)]),
      .g1(M_mux_a_g1[GEN_mux_a0*(1)+(1)-1-:(1)]),
      .out(M_mux_a_out[GEN_mux_a0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(5'h10+0)-1:0] M_mux_b_out;
  reg [(5'h10+0)-1:0] M_mux_b_s0;
  reg [(5'h10+0)-1:0] M_mux_b_g0;
  reg [(5'h10+0)-1:0] M_mux_b_g1;
  
  genvar GEN_mux_b0;
  generate
  for (GEN_mux_b0=0;GEN_mux_b0<5'h10;GEN_mux_b0=GEN_mux_b0+1) begin: mux_b_gen_0
    mux_2_15 mux_b (
      .s0(M_mux_b_s0[GEN_mux_b0*(1)+(1)-1-:(1)]),
      .g0(M_mux_b_g0[GEN_mux_b0*(1)+(1)-1-:(1)]),
      .g1(M_mux_b_g1[GEN_mux_b0*(1)+(1)-1-:(1)]),
      .out(M_mux_b_out[GEN_mux_b0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(5'h10+0)-1:0] M_mux_c_out;
  reg [(5'h10+0)-1:0] M_mux_c_s0;
  reg [(5'h10+0)-1:0] M_mux_c_s1;
  reg [(5'h10+0)*4-1:0] M_mux_c_in;
  
  genvar GEN_mux_c0;
  generate
  for (GEN_mux_c0=0;GEN_mux_c0<5'h10;GEN_mux_c0=GEN_mux_c0+1) begin: mux_c_gen_0
    mux_4_16 mux_c (
      .s0(M_mux_c_s0[GEN_mux_c0*(1)+(1)-1-:(1)]),
      .s1(M_mux_c_s1[GEN_mux_c0*(1)+(1)-1-:(1)]),
      .in(M_mux_c_in[GEN_mux_c0*(3'h4)+(3'h4)-1-:(3'h4)]),
      .out(M_mux_c_out[GEN_mux_c0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  integer i;
  
  always @* begin
    M_mux_c_in = 64'h0000000000000000;
    M_adder_a = a;
    M_adder_b = b;
    M_adder_alufn_signal = alufn_signal;
    z = M_adder_z;
    v = M_adder_v;
    n = M_adder_n;
    out = M_adder_out;
    M_compare_z = M_adder_z;
    M_compare_v = M_adder_v;
    M_compare_n = M_adder_n;
    M_compare_alufn_signal = alufn_signal;
    M_boolean_a = a;
    M_boolean_b = b;
    M_boolean_alufn_signal = alufn_signal;
    M_shifter_a = a;
    M_shifter_b = b[0+3-:4];
    M_shifter_alufn_signal = alufn_signal;
    M_multiplier_a = a;
    M_multiplier_b = b;
    M_rotator_a = a;
    M_rotator_b = b[0+3-:4];
    M_rotator_alufn_signal = alufn_signal;
    M_mux_a_g0 = M_adder_out;
    M_mux_a_g1 = M_multiplier_mul;
    M_mux_a_s0 = {5'h10{alufn_signal[1+0-:1]}};
    M_mux_b_g0 = M_shifter_shift;
    M_mux_b_g1 = M_rotator_out;
    M_mux_b_s0 = {5'h10{alufn_signal[3+0-:1]}};
    for (i = 1'h0; i < 5'h10; i = i + 1) begin
      M_mux_c_in[(i)*4+0+0-:1] = M_mux_a_out[(i)*1+0-:1];
      M_mux_c_in[(i)*4+1+0-:1] = M_boolean_bool[(i)*1+0-:1];
      M_mux_c_in[(i)*4+2+0-:1] = M_mux_b_out[(i)*1+0-:1];
      M_mux_c_in[(i)*4+3+0-:1] = (i == 1'h0) ? M_compare_cmp : 1'h0;
    end
    M_mux_c_s0 = {5'h10{alufn_signal[4+0-:1]}};
    M_mux_c_s1 = {5'h10{alufn_signal[5+0-:1]}};
    out = M_mux_c_out;
  end
endmodule

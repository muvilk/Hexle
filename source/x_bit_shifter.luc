module x_bit_shifter (
    input a[16],
    input b[4],
    input alufn_signal[6],
    output out[16]
  ) {
  
  mux_2 mux_2_8[16]; // cascade mux system
  mux_2 mux_2_4[16];
  mux_2 mux_2_2[16];
  mux_2 mux_2_1[16];
  
  always {
  
    //default assignment to avoid errors
    
    mux_2_8.s0 = 16x{b[3]};
    mux_2_4.s0 = 16x{b[2]};
    mux_2_2.s0 = 16x{b[1]};
    mux_2_1.s0 = 16x{b[0]};
    
    mux_2_8.g0 = a;
    mux_2_4.g0 = mux_2_8.out;
    mux_2_2.g0 = mux_2_4.out;
    mux_2_1.g0 = mux_2_2.out;
    
    case (c{alufn_signal[1], alufn_signal[0]}){
      b00:  // shift left
      
        mux_2_8.g1 = c{a[7:0], 8b0};
        mux_2_4.g1 = c{mux_2_8.out[11:0], 4b0};
        mux_2_2.g1 = c{mux_2_4.out[13:0], 2b0};
        mux_2_1.g1 = c{mux_2_2.out[14:0], b0};

        
      b01: // shift right
      
        mux_2_8.g1 = c{8b0, a[15:8]};
        mux_2_4.g1 = c{4b0, mux_2_8.out[15:4]};
        mux_2_2.g1 = c{2b0, mux_2_4.out[15:2]};
        mux_2_1.g1 = c{b0, mux_2_2.out[15:1]};
        
      b11: // shift right arithmetic
        
        mux_2_8.g1 = c{8x{a[15]}, a[15:8]};
        mux_2_4.g1 = c{4x{a[15]}, mux_2_8.out[15:4]};
        mux_2_2.g1 = c{2x{a[15]}, mux_2_4.out[15:2]};
        mux_2_1.g1 = c{a[15], mux_2_2.out[15:1]};

      default:
        mux_2_8.g1 = 16b0;
        mux_2_4.g1 = 16b0;
        mux_2_2.g1 = 16b0;
        mux_2_1.g1 = 16b0;
    }
    
    out = (alufn_signal[1:0] == 10) ? 15b0 : mux_2_1.out; // silencing output in the event of invalid input
    
}

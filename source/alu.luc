module alu (
    input a[16],
    input b[16],
    input alufn_signal[6],
    output out[16],
    output z,
    output v,
    output n
  ) {
  adder adder;
  boolean boolean;
  shifter shifter;
  compare compare; 
  multiplier multiplier;
  rotator rotator;
  mux_2 mux_a[16];
  mux_2 mux_b[16];
  mux_4 mux_c[16];
  var i;
  
  always {
    // default values to silence errors 
    mux_c.in = 16x{{4b0}}; 
    
    // input-module assignments
    
    adder.a = a;
    adder.b = b;
    adder.alufn_signal = alufn_signal;
    z = adder.z;
    v = adder.v;
    n = adder.n;
    out = adder.out; 
        
    compare.z = adder.z;
    compare.v = adder.v;
    compare.n = adder.n;
    compare.alufn_signal = alufn_signal;
    
    boolean.a = a;
    boolean.b = b;
    boolean.alufn_signal = alufn_signal;
    
    shifter.a = a;
    shifter.b = b[3:0];
    shifter.alufn_signal = alufn_signal;
    
    multiplier.a = a;
    multiplier.b = b;
    
    rotator.a = a;
    rotator.b = b[3:0];
    rotator.alufn_signal = alufn_signal;
    
    // output mux logic
    
    mux_a.g0 = adder.out;
    mux_a.g1 = multiplier.mul;
    mux_a.s0 = 16x{alufn_signal[1]};
    
    
    mux_b.g0 = shifter.shift;
    mux_b.g1 = rotator.out;
    mux_b.s0 = 16x{alufn_signal[3]};
    
    for (i = 0; i < 16; i++) {
      mux_c.in[i][0] = mux_a.out[i];
      mux_c.in[i][1] = boolean.bool[i];
      mux_c.in[i][2] = mux_b.out[i];
      mux_c.in[i][3] = (i == 0) ? compare.cmp : 0;
    }
    
    mux_c.s0 = 16x{alufn_signal[4]};
    mux_c.s1 = 16x{alufn_signal[5]};
    out = mux_c.out;
    
  }
}

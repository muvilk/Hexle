module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    //output led [8],         // 8 user controllable LEDs
    //input usb_rx,           // USB->Serial input
    //output usb_tx,          // USB->Serial output
    //output io_led [3][8],   // LEDs on IO Shield
    //output io_seg [8],      // 7-segment LEDs on IO Shield (ANODE)
    //output io_sel [4],      // Digit select on IO Shield
    //input io_button [5],    // 5 buttons on IO Shield
    //input io_dip [3][8]     // DIP switches on IO Shield

    input keypad[8];
    input green;
    input red;
    output digit_signal;
    output digit_clock;
    output rgb_signal;
    output rgb_clock;
  ) {
  
  sig rst;                  // reset signal
  alu alu;

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    dff a[32](.rst(rst));
    dff b[32](.rst(rst));
    dff alufn[6](.rst(rst));
    button_conditioner button_conditioner[3];
  }
  
  always {
  
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
 
    usb_tx = usb_rx;         // connect tx output
 
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};
    io_seg = 8b0; // connect segments to the driver
    io_sel = 4b0110; // turn on rightmost digit, and leftmost digit
    
    alu.a = a.q;
    alu.b = b.q;
    alu.alufn_signal = alufn.q;
     
  }
}
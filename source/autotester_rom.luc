module autotester_rom (
    input test[6],  // ROM address
    output auto_ans[16],   // alu correct answer (for later reference)
    output auto_a[16], // alu A input
    output auto_b[16], // alu B input
    output auto_alufn[6] // alu alufn input
  ) {
  
  //hardcoded values of a, b, and the correct answer for each test case
 
  //add
  const Z_A = b0000110000101011; 
  const Z_B = b0000000000000000;
  const Z = b0000110000101011;
  
  const I_A = b0000000000000000;
  const I_B = b0000110000101011;
  const I = b0000110000101011;
  
  const II_A = b0000110000101011;
  const II_B = b0001001111010111;
  const II = b0010000000000010;
  
  const III_A = b0111111111111111;
  const III_B = b0111111111111111;
  const III = b1111111111111110;
  
  //sub
  const IV_A = b0001001111010111;
  const IV_B = b0000000000000000;
  const IV = b0001001111010111;
  
  const V_A = b0000000000000000;
  const V_B = b0001001111010111;
  const V = b1110110000101001;
  
  const VI_A = b0001001111010111;
  const VI_B = b0011110000101010;
  const VI = b1101011110101101;
  
  const VII_A = b0000000000000000;
  const VII_B = b0111111111111111;
  const VII = b1000000000000001;
  
  //mul
  const VIII_A = b0011010011010011;
  const VIII_B = b0000000000000000;
  const VIII = b0000000000000000;
  
  const IX_A = b0011010011010011;
  const IX_B = b0000000000000001;
  const IX = b0011010011010011;
  
  const X_A = b0011010011010011;
  const X_B = b0101100110101101;
  const X = b0000110110010111;
  
  const XI_A = b1111111100001111;
  const XI_B = b1111000000001010;
  const XI = b0000011010010110;
  
  //and
  const XII_A = b1101100110101101;
  const XII_B = b0000000000000000;
  const XII = b0000000000000000;
  
  const XIII_A = b1101100110101101;
  const XIII_B = b1111111111111111;
  const XIII = b1101100110101101;
  
  const XIV_A = b1101100110101101;
  const XIV_B = b1101100110101101;
  const XIV = b1101100110101101;
  
  const XV_A = b1101100110101101;
  const XV_B = b0010011001010010;
  const XV = b0000000000000000;
  
  //or
  const XVI_A = b1101100110101101;
  const XVI_B = b0000000000000000;
  const XVI = b1101100110101101;
  
  const XVII_A = b1101100110101101;
  const XVII_B = b1111111111111111;
  const XVII = b1111111111111111;
  
  const XVIII_A = b1101100110101101;
  const XVIII_B = b1101100110101101;
  const XVIII = b1101100110101101;
  
  //xor
  const XIX_A = b1101100110101101;
  const XIX_B = b0000000000000000;
  const XIX = b1101100110101101;
  
  const XX_A = b1101100110101101;
  const XX_B = b1101100110101101;
  const XX = b0000000000000000;
  
  const XXI_A = b1101100110101101;
  const XXI_B = b0010011001010010;
  const XXI = b1111111111111111;
  
  //a
  const XXII_A = b1101100110101101;
  const XXII_B = b0000000000000000;
  const XXII = b1101100110101101;
  
  //shl
  const XXIII_A = b0000000000101001;
  const XXIII_B = b0000000000000010;
  const XXIII = b0000000010100100;
  
  const XXIV_A = b0000000000101001;
  const XXIV_B = b0000000000000000;
  const XXIV = b0000000000101001;
  
  const XXV_A = b0000000000101001;
  const XXV_B = b0000000000001111;
  const XXV = b1000000000000000;
  
  //shr
  const XXVI_A = b0000000000101001;
  const XXVI_B = b0000000000000010;
  const XXVI = b0000000000001010;
  
  const XXVII_A = b1000000000000000;
  const XXVII_B = b0000000000000000;
  const XXVII = b1000000000000000;
  
  const XXVIII_A = b1000000000000000;
  const XXVIII_B = b0000000000001111;
  const XXVIII = b0000000000000001;
  
  //sra
  const XXIX_A = b0101001000000000;
  const XXIX_B = b0000000000000011;
  const XXIX = b0000101001000000;
  
  const XXX_A = b1101001000000000;
  const XXX_B = b0000000000000011;
  const XXX = b1111101001000000;
  
  //cmpeq
  const XXXI_A = b0000000000001010;
  const XXXI_B = b0000000000001010;
  const XXXI = b0000000000000001;
  
  const XXXII_A = b0000000000001010;
  const XXXII_B = b0000000000001011;
  const XXXII = b0000000000000000;
  
  //cmplt
  const XXXIII_A = b0000000000000100;
  const XXXIII_B = b0000000000001000;
  const XXXIII = b0000000000000001;
  
  const XXXIV_A = b0000000000000100;
  const XXXIV_B = b0000000000000010;
  const XXXIV = b0000000000000000;
  
  const XXXV_A = b0000000000000100;
  const XXXV_B = b0000000000000100;
  const XXXV = b0000000000000000;
  
  //cmple
  const XXXVI_A = b0000000000000100;
  const XXXVI_B = b0000000000001000;
  const XXXVI = b0000000000000001;
  
  const XXXVII_A = b0000000000000100;
  const XXXVII_B = b0000000000000100;
  const XXXVII = b0000000000000001;
  
  const XXXVIII_A = b0000000000000100;
  const XXXVIII_B = b0000000000000010;
  const XXXVIII = b0000000000000000;
  
  //RTL
  const XXXIX_A = b1000010000100001;
  const XXXIX_B = b0000000000000000;
  const XXXIX = b1000010000100001 ;
  
  const XXXX_A = b1000010000100001 ;
  const XXXX_B = b0000000000001000;
  const XXXX = b0010000110000100;
  
  //RTR
  const XXXXI_A = b0001001001001000;
  const XXXXI_B = b0000000000000000;
  const XXXXI = b0001001001001000;
  
  const XXXXII_A = b0001001001001000;
  const XXXXII_B = b0000000000001000;
  const XXXXII = b0100100000010010;
  
  //alufn signals for the various tests
  
  const ADD = b000000;
  const SUB = b000001;
  const MUL = b000010;
  const AND = b011000;
  const OR = b011110;
  const XOR = b010110;
  const A = b011010;
  const SHL = b100000;
  const SHR = b100011;
  const SRA = b100011;
  const CMPEQ = b110011;
  const CMPLT = b110101;
  const CMPLE = b110111;
  const RTL = b101000;
  const RTR = b101100;
  
  always {
  
    case(test) {
      
      //addition
      
      b000000: 
        auto_a = Z_A;
        auto_b = Z_B;
        auto_alufn = ADD;
        auto_ans = Z;
        
      b000001: 
        auto_a = I_A;
        auto_b = I_B;
        auto_alufn = ADD;
        auto_ans = I;
        
      b000010: 
        auto_a = II_A;
        auto_b = II_B;
        auto_alufn = ADD;
        auto_ans = II;
        
      b000011: 
        auto_a = III_A;
        auto_b = III_B;
        auto_alufn = ADD;
        auto_ans = III;
      
      //subtraction
        
      b000100: 
        auto_a = IV_A;
        auto_b = IV_B;
        auto_alufn = SUB;
        auto_ans = IV;
        
      b000101: 
        auto_a = V_A;
        auto_b = V_B;
        auto_alufn = SUB;
        auto_ans = V;
        
      b000110: 
        auto_a = VI_A;
        auto_b = VI_B;
        auto_alufn = SUB;
        auto_ans = VI;
        
      b000111: 
        auto_a = VII_A;
        auto_b = VII_B;
        auto_alufn = SUB;
        auto_ans = VII;
      
      //multiplication
        
      b001000: 
        auto_a = VIII_A;
        auto_b = VIII_B;
        auto_alufn = MUL;
        auto_ans = VIII;
        
      b001001: 
        auto_a = IX_A;
        auto_b = IX_B;
        auto_alufn = MUL;
        auto_ans = IX;
        
      b001010: 
        auto_a = X_A;
        auto_b = X_B;
        auto_alufn = MUL;
        auto_ans = X;
        
      b001011: 
        auto_a = XI_A;
        auto_b = XI_B;
        auto_alufn = MUL;
        auto_ans = XI;
      
      //and
      
      b001100: 
        auto_a = XII_A;
        auto_b = XII_B;
        auto_alufn = AND;
        auto_ans = XII;
        
      b001101: 
        auto_a = XIII_A;
        auto_b = XIII_B;
        auto_alufn = AND;
        auto_ans = XIII;
        
      b001110: 
        auto_a = XIV_A;
        auto_b = XIV_B;
        auto_alufn = AND;
        auto_ans = XIV;
        
      b001111: 
        auto_a = XV_A;
        auto_b = XV_B;
        auto_alufn = AND;
        auto_ans = XV;
      
      //or
        
      b010000: 
        auto_a = XVI_A;
        auto_b = XVI_B;
        auto_alufn = OR;
        auto_ans = XVI;
        
      b010001: 
        auto_a = XVII_A;
        auto_b = XVII_B;
        auto_alufn = OR;
        auto_ans = XVII;
        
      b010010: 
        auto_a = XVIII_A;
        auto_b = XVIII_B;
        auto_alufn = OR;
        auto_ans = XVIII;
      
      //xor
        
      b010011: 
        auto_a = XIX_A;
        auto_b = XIX_B;
        auto_alufn = XOR;
        auto_ans = XIX;
        
      b010100:
        auto_a = XX_A;
        auto_b = XX_B;
        auto_alufn = XOR;
        auto_ans = XX;
        
      b010101: 
        auto_a = XXI_A;
        auto_b = XXI_B;
        auto_alufn = XOR;
        auto_ans = XXI;
      
      //a 
        
      b010110: 
        auto_a = XXII_A;
        auto_b = XXII_B;
        auto_alufn = A;
        auto_ans = XXII;
      
      //shl
        
      b010111: 
        auto_a = XXIII_A;
        auto_b = XXIII_B;
        auto_alufn = SHL;
        auto_ans = XXIII;
        
      b011000: 
        auto_a = XXIV_A;
        auto_b = XXIV_B;
        auto_alufn = SHL;
        auto_ans = XXIV;
        
      b011001: 
        auto_a = XXV_A;
        auto_b = XXV_B;
        auto_alufn = SHL;
        auto_ans = XXV;
      
      //shr
        
      b011010: 
        auto_a = XXVI_A;
        auto_b = XXVI_B;
        auto_alufn = SHR;
        auto_ans = XXVI;
        
      b011011: 
        auto_a = XXVII_A;
        auto_b = XXVII_B;
        auto_alufn = SHR;
        auto_ans = XXVII;
        
      b011100: 
        auto_a = XXVIII_A;
        auto_b = XXVIII_B;
        auto_alufn = SHR;
        auto_ans = XXVIII;
      
      //sra
      
      b011101: 
        auto_a = XXIX_A;
        auto_b = XXIX_B;
        auto_alufn = SRA;
        auto_ans = XXIX;
        
      b011110:  
        auto_a = XXX_A;
        auto_b = XXX_B;
        auto_alufn = SRA;
        auto_ans = XXX;
      
      //cmpeq
        
      b011111: 
        auto_a = XXXI_A;
        auto_b = XXXI_B;
        auto_alufn = CMPEQ;
        auto_ans = XXXI;
      
      b100000:
        auto_a = XXXII_A;
        auto_b = XXXII_B;
        auto_alufn = CMPEQ;
        auto_ans = XXXII;
        
      //cmplt
        
      b100001: 
        auto_a = XXXIII_A;
        auto_b = XXXIII_B;
        auto_alufn = CMPLT;
        auto_ans = XXXIII;
        
      b100010: 
        auto_a = XXXIV_A;
        auto_b = XXXIV_B;
        auto_alufn = CMPLT;
        auto_ans = XXXIV;
        
     b100011: 
        auto_a = XXXV_A;
        auto_b = XXXV_B;
        auto_alufn = CMPLT;
        auto_ans = XXXV;
      
      //cmple
        
        
      b100100: 
        auto_a = XXXVI_A;
        auto_b = XXXVI_B;
        auto_alufn = CMPLE;
        auto_ans = XXXVI;
        
     b100101: 
        auto_a = XXXVII_A;
        auto_b = XXXVII_B;
        auto_alufn = CMPLE;
        auto_ans = XXXVII;
        
     b100110: 
        auto_a = XXXVIII_A;
        auto_b = XXXVIII_B;
        auto_alufn = CMPLE;
        auto_ans = XXXVIII;
      
      //rtl
     b100111: 
        auto_a = XXXIX_A;
        auto_b = XXXIX_B;
        auto_alufn = RTL;
        auto_ans = XXXIX;
        
     b101000: 
        auto_a = XXXX_A;
        auto_b = XXXX_B;
        auto_alufn = RTL;
        auto_ans = XXXX;
      
      //rtr
     b101001: 
        auto_a = XXXXI_A;
        auto_b = XXXXI_B;
        auto_alufn = RTR;
        auto_ans = XXXXI;
        
     b101010: 
        auto_a = XXXXII_A;
        auto_b = XXXXII_B;
        auto_alufn = RTR;
        auto_ans = XXXXII;  
     
     
      default:
        auto_a = 16b0;
        auto_b = 16b0;
        auto_alufn = 16b0;
        auto_ans = 16b0;
  }
}
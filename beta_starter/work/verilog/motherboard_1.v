/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module motherboard_1 (
    input clk,
    input rst,
    input [2:0] irq,
    input slowclk,
    output reg [31:0] id,
    output reg [31:0] ia,
    output reg [31:0] ma,
    output reg [31:0] mrd,
    output reg [31:0] mwd,
    output reg [31:0] output_buffer,
    output reg [31:0] input_buffer,
    output reg [63:0] debug
  );
  
  
  
  wire [32-1:0] M_beta_ia;
  wire [32-1:0] M_beta_mem_data_address;
  wire [32-1:0] M_beta_mem_data_output;
  wire [1-1:0] M_beta_wr;
  wire [64-1:0] M_beta_debug;
  reg [1-1:0] M_beta_slowclk;
  reg [1-1:0] M_beta_rst;
  reg [1-1:0] M_beta_irq;
  reg [32-1:0] M_beta_instruction;
  reg [32-1:0] M_beta_mem_data_input;
  beta_cpu_7 beta (
    .clk(clk),
    .slowclk(M_beta_slowclk),
    .rst(M_beta_rst),
    .irq(M_beta_irq),
    .instruction(M_beta_instruction),
    .mem_data_input(M_beta_mem_data_input),
    .ia(M_beta_ia),
    .mem_data_address(M_beta_mem_data_address),
    .mem_data_output(M_beta_mem_data_output),
    .wr(M_beta_wr),
    .debug(M_beta_debug)
  );
  
  localparam MEMORY_SIZE = 6'h20;
  
  wire [32-1:0] M_instruction_unit_out;
  reg [5-1:0] M_instruction_unit_addr;
  instruction_rom_8 instruction_unit (
    .addr(M_instruction_unit_addr),
    .out(M_instruction_unit_out)
  );
  
  wire [32-1:0] M_memory_unit_mrd;
  wire [32-1:0] M_memory_unit_id;
  reg [7-1:0] M_memory_unit_raddr;
  reg [7-1:0] M_memory_unit_waddr;
  reg [32-1:0] M_memory_unit_wd;
  reg [1-1:0] M_memory_unit_we;
  reg [7-1:0] M_memory_unit_ia;
  reg [1-1:0] M_memory_unit_instruction_write_enable;
  reg [32-1:0] M_memory_unit_instruction_towrite;
  memory_unit_9 memory_unit (
    .clk(clk),
    .raddr(M_memory_unit_raddr),
    .waddr(M_memory_unit_waddr),
    .wd(M_memory_unit_wd),
    .we(M_memory_unit_we),
    .ia(M_memory_unit_ia),
    .instruction_write_enable(M_memory_unit_instruction_write_enable),
    .instruction_towrite(M_memory_unit_instruction_towrite),
    .mrd(M_memory_unit_mrd),
    .id(M_memory_unit_id)
  );
  
  reg [31:0] M_system_output_buffer_d, M_system_output_buffer_q = 1'h0;
  
  reg [31:0] M_system_input_buffer_d, M_system_input_buffer_q = 1'h0;
  
  reg [4:0] M_writer_counter_d, M_writer_counter_q = 1'h0;
  
  
  localparam INSTRUCTIONLOAD_motherboard = 3'd0;
  localparam RUN_motherboard = 3'd1;
  localparam LOAD_OUTPUT_motherboard = 3'd2;
  localparam DISPLAY_OUTPUT_motherboard = 3'd3;
  localparam UPDATE_INPUT_motherboard = 3'd4;
  
  reg [2:0] M_motherboard_d, M_motherboard_q = INSTRUCTIONLOAD_motherboard;
  
  always @* begin
    M_motherboard_d = M_motherboard_q;
    M_system_input_buffer_d = M_system_input_buffer_q;
    M_writer_counter_d = M_writer_counter_q;
    M_system_output_buffer_d = M_system_output_buffer_q;
    
    M_instruction_unit_addr = 1'h0;
    M_beta_irq = (|irq);
    if ((|irq)) begin
      if (irq[0+0-:1]) begin
        M_system_input_buffer_d = 32'h000000b0;
      end else begin
        if (irq[1+0-:1]) begin
          M_system_input_buffer_d = 32'h000000b1;
        end else begin
          if (irq[2+0-:1]) begin
            M_system_input_buffer_d = 32'h000000b2;
          end
        end
      end
    end
    M_beta_slowclk = slowclk;
    M_beta_rst = rst;
    M_beta_instruction = M_memory_unit_id;
    M_beta_mem_data_input = M_memory_unit_mrd;
    M_memory_unit_ia = M_beta_ia;
    M_memory_unit_wd = M_beta_mem_data_output;
    M_memory_unit_we = M_beta_wr;
    M_memory_unit_waddr = M_beta_mem_data_address;
    M_memory_unit_raddr = M_beta_mem_data_address;
    M_memory_unit_instruction_write_enable = 1'h0;
    M_memory_unit_instruction_towrite = 32'h00000000;
    
    case (M_motherboard_q)
      INSTRUCTIONLOAD_motherboard: begin
        M_beta_rst = 1'h1;
        M_writer_counter_d = M_writer_counter_q + 1'h1;
        M_instruction_unit_addr = M_writer_counter_q;
        M_memory_unit_instruction_towrite = M_instruction_unit_out;
        M_memory_unit_instruction_write_enable = 1'h1;
        M_memory_unit_ia = M_writer_counter_q << 2'h2;
        if ((M_writer_counter_q + 1'h1) == 6'h20) begin
          M_motherboard_d = RUN_motherboard;
        end
      end
      RUN_motherboard: begin
        if (slowclk) begin
          M_motherboard_d = LOAD_OUTPUT_motherboard;
        end else begin
          M_motherboard_d = RUN_motherboard;
        end
      end
      LOAD_OUTPUT_motherboard: begin
        M_memory_unit_raddr = 32'h0000000c;
        M_motherboard_d = DISPLAY_OUTPUT_motherboard;
      end
      DISPLAY_OUTPUT_motherboard: begin
        M_system_output_buffer_d = M_memory_unit_mrd;
        M_motherboard_d = UPDATE_INPUT_motherboard;
      end
      UPDATE_INPUT_motherboard: begin
        M_memory_unit_waddr = 32'h00000010;
        M_memory_unit_wd = M_system_input_buffer_q;
        M_memory_unit_we = 1'h1;
        M_motherboard_d = RUN_motherboard;
      end
    endcase
    output_buffer = M_system_output_buffer_q;
    input_buffer = M_system_input_buffer_q;
    ia = M_beta_ia;
    id = M_memory_unit_id;
    ma = M_beta_mem_data_address;
    mrd = M_memory_unit_mrd;
    mwd = M_beta_mem_data_output;
    debug = M_beta_debug;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_system_input_buffer_q <= 1'h0;
    end else begin
      M_system_input_buffer_q <= M_system_input_buffer_d;
    end
  end
  
  
  always @(posedge clk) begin
    M_motherboard_q <= M_motherboard_d;
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_system_output_buffer_q <= 1'h0;
    end else begin
      M_system_output_buffer_q <= M_system_output_buffer_d;
    end
  end
  
  
  always @(posedge clk) begin
    M_writer_counter_q <= M_writer_counter_d;
  end
  
endmodule

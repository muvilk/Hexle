/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module regfile_memory_27 (
    input clk,
    input rst,
    input [4:0] read_address_1,
    input [4:0] read_address_2,
    output reg [31:0] reg_data_1,
    output reg [31:0] reg_data_2,
    input [4:0] write_address,
    input [31:0] write_data,
    input write_enable
  );
  
  
  
  reg [1023:0] M_registers_d, M_registers_q = 1024'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  
  always @* begin
    M_registers_d = M_registers_q;
    
    reg_data_1 = 1'h0;
    reg_data_2 = 1'h0;
    
    case (read_address_1)
      5'h00: begin
        reg_data_1 = M_registers_q[0+31-:32];
      end
      5'h01: begin
        reg_data_1 = M_registers_q[32+31-:32];
      end
      5'h02: begin
        reg_data_1 = M_registers_q[64+31-:32];
      end
      5'h03: begin
        reg_data_1 = M_registers_q[96+31-:32];
      end
      5'h04: begin
        reg_data_1 = M_registers_q[128+31-:32];
      end
      5'h05: begin
        reg_data_1 = M_registers_q[160+31-:32];
      end
      5'h06: begin
        reg_data_1 = M_registers_q[192+31-:32];
      end
      5'h07: begin
        reg_data_1 = M_registers_q[224+31-:32];
      end
      5'h08: begin
        reg_data_1 = M_registers_q[256+31-:32];
      end
      5'h09: begin
        reg_data_1 = M_registers_q[288+31-:32];
      end
      5'h0a: begin
        reg_data_1 = M_registers_q[320+31-:32];
      end
      5'h0b: begin
        reg_data_1 = M_registers_q[352+31-:32];
      end
      5'h0c: begin
        reg_data_1 = M_registers_q[384+31-:32];
      end
      5'h0d: begin
        reg_data_1 = M_registers_q[416+31-:32];
      end
      5'h0e: begin
        reg_data_1 = M_registers_q[448+31-:32];
      end
      5'h0f: begin
        reg_data_1 = M_registers_q[480+31-:32];
      end
      5'h10: begin
        reg_data_1 = M_registers_q[512+31-:32];
      end
      5'h11: begin
        reg_data_1 = M_registers_q[544+31-:32];
      end
      5'h12: begin
        reg_data_1 = M_registers_q[576+31-:32];
      end
      5'h13: begin
        reg_data_1 = M_registers_q[608+31-:32];
      end
      5'h14: begin
        reg_data_1 = M_registers_q[640+31-:32];
      end
      5'h15: begin
        reg_data_1 = M_registers_q[672+31-:32];
      end
      5'h16: begin
        reg_data_1 = M_registers_q[704+31-:32];
      end
      5'h17: begin
        reg_data_1 = M_registers_q[736+31-:32];
      end
      5'h18: begin
        reg_data_1 = M_registers_q[768+31-:32];
      end
      5'h19: begin
        reg_data_1 = M_registers_q[800+31-:32];
      end
      5'h1a: begin
        reg_data_1 = M_registers_q[832+31-:32];
      end
      5'h1b: begin
        reg_data_1 = M_registers_q[864+31-:32];
      end
      5'h1c: begin
        reg_data_1 = M_registers_q[896+31-:32];
      end
      5'h1d: begin
        reg_data_1 = M_registers_q[928+31-:32];
      end
      5'h1e: begin
        reg_data_1 = M_registers_q[960+31-:32];
      end
      5'h1f: begin
        reg_data_1 = 32'h00000000;
      end
    endcase
    
    case (read_address_2)
      5'h00: begin
        reg_data_2 = M_registers_q[0+31-:32];
      end
      5'h01: begin
        reg_data_2 = M_registers_q[32+31-:32];
      end
      5'h02: begin
        reg_data_2 = M_registers_q[64+31-:32];
      end
      5'h03: begin
        reg_data_2 = M_registers_q[96+31-:32];
      end
      5'h04: begin
        reg_data_2 = M_registers_q[128+31-:32];
      end
      5'h05: begin
        reg_data_2 = M_registers_q[160+31-:32];
      end
      5'h06: begin
        reg_data_2 = M_registers_q[192+31-:32];
      end
      5'h07: begin
        reg_data_2 = M_registers_q[224+31-:32];
      end
      5'h08: begin
        reg_data_2 = M_registers_q[256+31-:32];
      end
      5'h09: begin
        reg_data_2 = M_registers_q[288+31-:32];
      end
      5'h0a: begin
        reg_data_2 = M_registers_q[320+31-:32];
      end
      5'h0b: begin
        reg_data_2 = M_registers_q[352+31-:32];
      end
      5'h0c: begin
        reg_data_2 = M_registers_q[384+31-:32];
      end
      5'h0d: begin
        reg_data_2 = M_registers_q[416+31-:32];
      end
      5'h0e: begin
        reg_data_2 = M_registers_q[448+31-:32];
      end
      5'h0f: begin
        reg_data_2 = M_registers_q[480+31-:32];
      end
      5'h10: begin
        reg_data_2 = M_registers_q[512+31-:32];
      end
      5'h11: begin
        reg_data_2 = M_registers_q[544+31-:32];
      end
      5'h12: begin
        reg_data_2 = M_registers_q[576+31-:32];
      end
      5'h13: begin
        reg_data_2 = M_registers_q[608+31-:32];
      end
      5'h14: begin
        reg_data_2 = M_registers_q[640+31-:32];
      end
      5'h15: begin
        reg_data_2 = M_registers_q[672+31-:32];
      end
      5'h16: begin
        reg_data_2 = M_registers_q[704+31-:32];
      end
      5'h17: begin
        reg_data_2 = M_registers_q[736+31-:32];
      end
      5'h18: begin
        reg_data_2 = M_registers_q[768+31-:32];
      end
      5'h19: begin
        reg_data_2 = M_registers_q[800+31-:32];
      end
      5'h1a: begin
        reg_data_2 = M_registers_q[832+31-:32];
      end
      5'h1b: begin
        reg_data_2 = M_registers_q[864+31-:32];
      end
      5'h1c: begin
        reg_data_2 = M_registers_q[896+31-:32];
      end
      5'h1d: begin
        reg_data_2 = M_registers_q[928+31-:32];
      end
      5'h1e: begin
        reg_data_2 = M_registers_q[960+31-:32];
      end
      5'h1f: begin
        reg_data_2 = 32'h00000000;
      end
    endcase
    
    case (write_enable)
      1'h0: begin
        M_registers_d = M_registers_q;
      end
      1'h1: begin
        
        case (write_address)
          5'h1f: begin
            M_registers_d[992+31-:32] = M_registers_q[992+31-:32];
          end
          default: begin
            M_registers_d[(5'h10 * write_address[4+0-:1] + 4'h8 * write_address[3+0-:1] + 3'h4 * write_address[2+0-:1] + 2'h2 * write_address[1+0-:1] + 1'h1 * write_address[0+0-:1])*32+31-:32] = write_data;
          end
        endcase
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_registers_q <= 1024'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end else begin
      M_registers_q <= M_registers_d;
    end
  end
  
endmodule

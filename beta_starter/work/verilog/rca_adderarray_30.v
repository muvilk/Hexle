/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module rca_adderarray_30 (
    input [31:0] a,
    input [31:0] b,
    output reg [31:0] out
  );
  
  
  
  wire [(5'h1f+0)*32-1:0] M_adderarray_s;
  wire [(5'h1f+0)-1:0] M_adderarray_co;
  reg [(5'h1f+0)*32-1:0] M_adderarray_a;
  reg [(5'h1f+0)*32-1:0] M_adderarray_b;
  reg [(5'h1f+0)-1:0] M_adderarray_ci;
  
  genvar GEN_adderarray0;
  generate
  for (GEN_adderarray0=0;GEN_adderarray0<5'h1f;GEN_adderarray0=GEN_adderarray0+1) begin: adderarray_gen_0
    thirtytwobit_rca_28 adderarray (
      .a(M_adderarray_a[GEN_adderarray0*(6'h20)+(6'h20)-1-:(6'h20)]),
      .b(M_adderarray_b[GEN_adderarray0*(6'h20)+(6'h20)-1-:(6'h20)]),
      .ci(M_adderarray_ci[GEN_adderarray0*(1)+(1)-1-:(1)]),
      .s(M_adderarray_s[GEN_adderarray0*(6'h20)+(6'h20)-1-:(6'h20)]),
      .co(M_adderarray_co[GEN_adderarray0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  integer i;
  
  always @* begin
    M_adderarray_a[0+31-:32] = {{a[0+30-:31]} & {5'h1f{b[1+0-:1]}}, 1'h0};
    M_adderarray_a[32+31-:32] = {{a[0+29-:30]} & {5'h1e{b[2+0-:1]}}, 2'h0};
    M_adderarray_a[64+31-:32] = {{a[0+28-:29]} & {5'h1d{b[3+0-:1]}}, 3'h0};
    M_adderarray_a[96+31-:32] = {{a[0+27-:28]} & {5'h1c{b[4+0-:1]}}, 4'h0};
    M_adderarray_a[128+31-:32] = {{a[0+26-:27]} & {5'h1b{b[5+0-:1]}}, 5'h00};
    M_adderarray_a[160+31-:32] = {{a[0+25-:26]} & {5'h1a{b[6+0-:1]}}, 6'h00};
    M_adderarray_a[192+31-:32] = {{a[0+24-:25]} & {5'h19{b[7+0-:1]}}, 7'h00};
    M_adderarray_a[224+31-:32] = {{a[0+23-:24]} & {5'h18{b[8+0-:1]}}, 8'h00};
    M_adderarray_a[256+31-:32] = {{a[0+22-:23]} & {5'h17{b[9+0-:1]}}, 9'h000};
    M_adderarray_a[288+31-:32] = {{a[0+21-:22]} & {5'h16{b[10+0-:1]}}, 10'h000};
    M_adderarray_a[320+31-:32] = {{a[0+20-:21]} & {5'h15{b[11+0-:1]}}, 11'h000};
    M_adderarray_a[352+31-:32] = {{a[0+19-:20]} & {5'h14{b[12+0-:1]}}, 12'h000};
    M_adderarray_a[384+31-:32] = {{a[0+18-:19]} & {5'h13{b[13+0-:1]}}, 13'h0000};
    M_adderarray_a[416+31-:32] = {{a[0+17-:18]} & {5'h12{b[14+0-:1]}}, 14'h0000};
    M_adderarray_a[448+31-:32] = {{a[0+16-:17]} & {5'h11{b[15+0-:1]}}, 15'h0000};
    M_adderarray_a[480+31-:32] = {{a[0+15-:16]} & {5'h10{b[16+0-:1]}}, 16'h0000};
    M_adderarray_a[512+31-:32] = {{a[0+14-:15]} & {4'hf{b[17+0-:1]}}, 17'h00000};
    M_adderarray_a[544+31-:32] = {{a[0+13-:14]} & {4'he{b[18+0-:1]}}, 18'h00000};
    M_adderarray_a[576+31-:32] = {{a[0+12-:13]} & {4'hd{b[19+0-:1]}}, 19'h00000};
    M_adderarray_a[608+31-:32] = {{a[0+11-:12]} & {4'hc{b[20+0-:1]}}, 20'h00000};
    M_adderarray_a[640+31-:32] = {{a[0+10-:11]} & {4'hb{b[21+0-:1]}}, 21'h000000};
    M_adderarray_a[672+31-:32] = {{a[0+9-:10]} & {4'ha{b[22+0-:1]}}, 22'h000000};
    M_adderarray_a[704+31-:32] = {{a[0+8-:9]} & {4'h9{b[23+0-:1]}}, 23'h000000};
    M_adderarray_a[736+31-:32] = {{a[0+7-:8]} & {4'h8{b[24+0-:1]}}, 24'h000000};
    M_adderarray_a[768+31-:32] = {{a[0+6-:7]} & {3'h7{b[25+0-:1]}}, 25'h0000000};
    M_adderarray_a[800+31-:32] = {{a[0+5-:6]} & {3'h6{b[26+0-:1]}}, 26'h0000000};
    M_adderarray_a[832+31-:32] = {{a[0+4-:5]} & {3'h5{b[27+0-:1]}}, 27'h0000000};
    M_adderarray_a[864+31-:32] = {{a[0+3-:4]} & {3'h4{b[28+0-:1]}}, 28'h0000000};
    M_adderarray_a[896+31-:32] = {{a[0+2-:3]} & {2'h3{b[29+0-:1]}}, 29'h00000000};
    M_adderarray_a[928+31-:32] = {{a[0+1-:2]} & {2'h2{b[30+0-:1]}}, 30'h00000000};
    M_adderarray_a[960+31-:32] = {a[0+0-:1] & b[31+0-:1], 31'h00000000};
    M_adderarray_b[0+31-:32] = a & {6'h20{b[0+0-:1]}};
    for (i = 1'h1; i < 5'h1f; i = i + 1) begin
      M_adderarray_b[(i)*32+31-:32] = M_adderarray_s[(i - 1'h1)*32+31-:32];
    end
    M_adderarray_ci = 32'h00000000;
    out = M_adderarray_s[960+31-:32];
  end
endmodule
